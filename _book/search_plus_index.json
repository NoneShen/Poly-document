{"./":{"url":"./","title":"Introduction","keywords":"","body":"Poly Network Poly Network is a global cross-chain interoperability protocol for implementing blockchain interoperability and building the Web3.0 infrastructure. Poly Network has also integrated over 15 blockchains, including Ethereum, Polygon, Avalanche, Fantom, BSC, Arbitrum, Optimism, Heco, OEC, Neo, Ontology, Zilliqa, Elrond, xDai, etc. Since the launch, the protocol has enabled more than USD 15 billion to cross-chain asset transfer, and its TVL surpasses USD 1 billion. Cross-chain asset transfer NFT cross-chain transfer Token Swap we provide: Protocol for joining the poly cross-chain ecosystem The poly cross-chain ecosystem provides a platform for various chains to interact and transfer data and conduct cross-chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and share all kinds of information between chains, while the chains that do not support smart contracts are limited to cross-chain asset transfer. Protocol for Integrating new cross-chain tokens Specification for implementing Cross-chain smart contracts Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-06 10:07:58 "},"add_chain/readme.html":{"url":"add_chain/readme.html","title":"Joining the Cross Chain Ecosystem","keywords":"","body":"How to Join the Cross-Chain Ecosystem The poly cross-chain ecosystem provides a platform for various chains to interact and transfer data and conduct cross-chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and share all kinds of information between chains, while the chains that do not support smart contracts are limited to cross-chain asset transfer. General Steps Adding a new chain to poly involves three main phases: Implementation The smart contracts, chain registration interface method, block verification interface method, and relayer interface method. Deployment and Registration Operations such as smart contract deployment, side chain registration, and relayer setup. Proceeded only by the poly team following general specifications. Initialization and Running Perform specific actions like business contract call, cross-chain events handling based on the selected solution on poly nodes. This section is intended for developers who want to help add a new chain to the poly cross-chain ecosystem. Here is the outline that will be introduced: The introduction and development specification of Smart Contract The introduction and development specification of New chain registration The introduction and development specification of block data verification The introduction and development specification of relayer Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:52:24 "},"add_chain/contracts.html":{"url":"add_chain/contracts.html","title":"Cross-Chain Smart Contract","keywords":"","body":"Calling Cross Chain Manager Contrat This Branch is intended for developers who want to develop your own business logic contract which interacted with the cross chain manager provided by Poly Network. This part introduces the contracts involved in the cross chain process and the interfaces interacted with business logic contract. Business logic serves as smart contract invoked by users both on source chain and target chain. Cross Chain Manager contract offers two interfaces to interact with business logic contract directly. In additionally, an example of business logic is offered to help understand the interaction more vividly. Introduction Poly cross chain ecosystem provides a platform for various different chains to interact and transfer data along with carrying out cross chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and transfer all kinds of information between chains, while the chains that do not support smart contracts are limited to cross chain asset transfer. This part will introduce the contracts involved in the cross chain process and how they interact with each other. List of Contracts Block header synchronization contract: This contract maintains the record of block headers of the relay chain on this chain. These block headers serve as means to verify cross chain transactions. In the following context, it may be referred to as Header Sync Contract. Cross chain management contract: Every chain can have no more than one management contract. It creates the cross chain transactions that are transferred to the relay chain. All the service contracts that contain the business logic need to communicate with the management contract. In the following context, it may be referred to as CCM Contract. Service contract: It serves as business logic contract invoked by users both on source chain and target chain. This document offers an example of it, which is named as LockProxy Contract in the part Example. Cross Chain Interaction In general, in a full cross chain process, the user sends a cross chain request to the service contract on source chain by invoking a dApp's cross chain interface, and on the target chain the dApp's smart contract executes the necessary logic to produce the final result. source chain and target chain implement the two contracts (Header Sync Contract & CCM Contract) and other necessary interfaces, and anyone can develop an infrastructure for dApps around the CCM Contract. The contracts deployed on source chain and target chain make up a complete cross chain dApp. Interfaces To implement cross chain features for any chain, cross chain management contract is needed to be deployed. Every chain can have no more than one management contract. On source chain, it creates the cross chain transactions that are transferred to the Poly; On target chain, it verifies the legitimacy of transactions and executes the method on target business logic contract. All the business logic smart contract need to communicate with the management contract. Following are the detailed description of two interfaces which interacts with the business logic contracts. /* * @param toChainId The target chain id * @param toAddress The address in bytes format to receive same amount of tokens in target chain * @param toContract Target smart contract address in bytes in target block chain * @param txData Transaction data for target chain, include toAssetHash, toAddress, amount * @return true or false */ function crossChain(uint64 toChainId, bytes calldata toContract, bytes calldata method, bytes calldata txData) whenNotPaused external returns (bool) This method creates cross chain transactions, invoked by service contracts when a cross chain function is carried out in the logic contract. This method constructs the rawParam, which contains transaction hash, msg.sender, target chain id, business logic contract to be invoked on target chain, the target method to be invoked and the serialized transaction data which has been already constructed in business logic contract. Then put the hash of rawParam into storage, to help provide proof of transaction existence. /* * @param proof Poly chain transaction merkle proof * @param rawHeader The header containing crossStateRoot to verify the above tx merkle proof * @param headerProof The header merkle proof used to verify rawHeader * @param curRawHeader Any header in current epoch consensus of Poly chain * @param headerSig The coverted signature veriable for solidity derived from Poly chain consensus nodes' signature * used to verify the validity of curRawHeader * @return true or false */ function verifyHeaderAndExecuteTx(bytes memory proof, bytes memory rawHeader, bytes memory headerProof, bytes memory curRawHeader, bytes memory headerSig) whenNotPaused public returns (bool) This method is meant to be invoked by relayer, in some cases user could invoke this method by themselves if they get the valid block information from Poly. This method fetches and processes cross chain transactions, finds the merkle root of a transaction based on the block height (in the block header), verifies the legitimacy of transaction using the transaction parameters. After verifying Poly chain header and proof, it will invoke the service contract on the target chain. The detailed invoking will be processed as _executeCrossChainTx method as following: This method is meant to invoke the targeting contract, and trigger executation of cross chain tx on target chain. Firstly, we need to ensure the targeting contract gonna be invoked is indeed a contract rather than a normal account address. Then we construct a method call on target business logic contract, first we need to encodePacked the _method and the format of input data \"(bytes,bytes,uint64)\" , then keccak256 the encoded string, use bytes4 to take the first four bytes of the call data for a function call specifies the function to be called. Parameter _method is from the toMerkleValue , which is parsed from proof. And the input parameters format is restricted as (bytes _args, bytes _fromContractAddr, uint64 _fromChainId). These two parts are encodePacked as a call. After calling the method, we need to check that if the return value is true. Only if the return value is true, will the whole cross chain transaction be executed successfully. You may refer to the full code of EthCrossChainManager contract. Example This part provides an example of business logic contract, which provides a method to cross-chain transfer assets between two chains where already equipped with Cross-Chain Manager Contract and other required contracts mentioned before. In this example, the business logic contract is named as LockProxy contract. Authority Management: To ensure the security and integrity of the methods in contract, developers of business logic contracts need to manage the authority of invoking the methods. Here we provider a modifier which could modify the authority of these methods. // ethCCMProxyAddr: the address of cross chain manager proxy contract function setManagerProxy(address ethCCMProxyAddr) onlyOwner public { managerProxyContract = ethCCMProxyAddr; emit SetManagerProxyEvent(managerProxyContract); } modifier onlyManagerContract() { IEthCrossChainManagerProxy ieccmp = IEthCrossChainManagerProxy(managerProxyContract); require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\"); _; } Setting the manager contract and binding assets/chains pair should be stricted to only the owner of LockProxy contract. Releasing the assets on target chain should also be stricted to only the cross chain manager contract. Bind assets: Besides of the verifying the existence of transaction through CCM contract, LockProxy contract needs to make sure of the accuracy of the assets relationship in the transaction. Therefore, the business contract should maintain the asset mapping and CCM proxy contract mapping. Asset mapping is from the asset on source chain to the mapping of target chain id to the same kind of asset issued on target chain. CCM contract mapping is from the target chain id to the LockProxy contract address on target chain. The asset mapping relationship which stored in LockProxy contract will help provide the completeness of transaction data. Bind actions also prevent the wrong input from users which may lead to transfer assets to wrong asset contract address. pragma solidity ^0.5.0; import \"./../../libs/ownership/Ownable.sol\"; contract LockProxy is Ownable { address public managerProxyContract; mapping(uint64 => bytes) public proxyHashMap; mapping(address => mapping(uint64 => bytes)) public assetHashMap; // toChainId: the target chain id // targetProxyHash: the address of lock proxy contract on target chain function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool) { proxyHashMap[toChainId] = targetProxyHash; emit BindProxyEvent(toChainId, targetProxyHash); return true; } // fromAssetHash: asset hash on source chain // toAssetHash: asset hash on target chain function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes memory toAssetHash) onlyOwner public returns (bool) { assetHashMap[fromAssetHash][toChainId] = toAssetHash; emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash)); return true; } } After setting the CCM proxy contract, the two mapping relationships should be input through bindProxyHash() and bindAssetHash(). Both on source chain and target chain, the user needs to bind the asset hash and LockProxy contract, so that the LockProxy contract can maintain mappings: From asset contract address on source chain and that on target chain with target chain id. From target chain id to LockProxy contract address on target chain After finishing setting all above, LockProxy contract will work properly as the business logic. Cross-Chain transaction: One cross chain transaction can be divided into two parts: on source chain, LockProxy contract will lock the asset to contract; on target chain, LockProxy contract will unlock the same amount to the target address. The whole process needs to convey the transaction data. The relationships between two chain's transaction data parameters shows below: /* * @param fromAssetHash The asset address in current chain * @param toChainId The target chain id * @param toAddress The address in bytes format to receive same amount of tokens in target chain * @param amount The amount of tokens to be crossed from ethereum to the chain with chainId */ function lock(address fromAssetHash, uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool) { require(amount != 0, \"amount cannot be zero!\"); require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract failed!\"); bytes memory toAssetHash = assetHashMap[fromAssetHash][toChainId]; require(toAssetHash.length != 0, \"empty illegal toAssetHash\"); TxArgs memory txArgs = TxArgs({ toAssetHash: toAssetHash, toAddress: toAddress, amount: amount }); bytes memory txData = _serializeTxArgs(txArgs); IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract); address eccmAddr = eccmp.getEthCrossChainManager(); IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr); bytes memory toProxyHash = proxyHashMap[toChainId]; require(toProxyHash.length != 0, \"empty illegal toProxyHash\"); require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error!\"); emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, amount); return true; } This function is meant to be invoked by the user, a certain amount tokens will be locked immediately. Then the same amount of tokens will be unlocked from LockProxy contract on the target chain with chain id later; The user makes an asset token cross chain transaction request through the dApp which works in source chain, LockProxy contract gets the transation information which contains the asset contract address on source chain, the target chain id, the target address and amount of token to be transfered. By calling the function lock(), LockProxy contract will lock(transfer) the certain amount to asset contract; Then the transaction data will be packed, which then in turn invokes the CCM contract. The management contract transfers the parameters of transaction data to the target chain and a cross chain transaction is created by management contract which is sent to the target chain based on block generation on source chain; The serialized transaction data, along with the chain id and LockProxy contract address of target chain and the method needed to be called on target chain, will be sent through crossChain() in CCM contract. /* * @param argsBs The argument bytes recevied by the lock proxy contract on source chain, * need to be deserialized based on the way of serialization in the * lock proxy contract on source chain . * @param fromContractAddr The source chain contract address * @param fromChainId The source chain id */ function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool) { TxArgs memory args = _deserializeTxArgs(argsBs); require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\"); require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error!\"); require(args.toAssetHash.length != 0, \"toAssetHash cannot be empty\"); address toAssetHash = Utils.bytesToAddress(args.toAssetHash); require(args.toAddress.length != 0, \"toAddress cannot be empty\"); address toAddress = Utils.bytesToAddress(args.toAddress); require(_transferFromContract(toAssetHash, toAddress, args.amount), \"transfer asset from lock_proxy contract to toAddress failed!\"); emit UnlockEvent(toAssetHash, toAddress, args.amount); return true; } This functions is meant to be invoked by Cross-Chain manager contract. It deserializes the transaction data and invokes the asset contract to release the tokens to target address. After verification through Poly (detailed verification process shown in part Cross Chain Interaction Between Chains), the packed transaction data could be executed on target chain. verifyHeaderAndExecuteTx() in Cross Chain Manager contract determines the legitimacy of the cross chain transaction information and resolve the parameters of transaction data from the Poly chain transaction merkle proof and crossStateRoot contained in the block header. Then call the function unlock() to deserialize the transaction data and unlock (transfer) the certain amount of token to the target address on target chain and completes the cross chain contract invocation. Serialize & deserialize transaction data function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory) { bytes memory buff; buff = abi.encodePacked( ZeroCopySink.WriteVarBytes(args.toAssetHash), ZeroCopySink.WriteVarBytes(args.toAddress), ZeroCopySink.WriteUint255(args.amount) ); return buff; } function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory) { TxArgs memory args; uint256 off = 0; (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off); (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off); return args; } In the process of contract development, developers will always encounter serialization and deserialization problems, that is, how to save a struct type of data in the database and how to deserialize the byte array read from the database to obtain data of struct type. In the libs, ZeroCopySource.sol and ZeroCopySink.sol offered the interfaces to serialize and deserialize data. When serializing various data types, for fixed-length data (for example: bytes, uint16, uint32, uint64, etc.), directly convert the data into a byte array; for data with variable length, serializing the length is required firstly, and then serialize the data (for example, unsigned integers of unknown size, including uint16, uint32, or uint64, etc.). Deserialization is the opposite of serialization. For all serialization methods, there are corresponding deserialization methods. When reading data of a specified type, if you know its length, you can read it directly; for data with an unknown length, read the length first, and then read the content. You may refer to the full code of LockProxy contract . Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:52:36 "},"add_chain/registration.html":{"url":"add_chain/registration.html","title":"Chain Registration","keywords":"","body":"Chain Registration Registration is the basis for monitoring and processing block information and checking the execution of cross-chain transactions. After the registration process is complete and the Cross Chain Council approves the application, the chain officially becomes a part of the cross-chain ecosystem. [!NOTE] Registration and update are usually completed by application in a transaction using the trusted registered account by the poly team. Development Specifications for Registration Cross Chain Management Method Description RegisterSideChain Pack essential information and send it as an application to the poly chain. please refer to the code for more details. updateSideChain Pack updated essential information and send it as an application to the poly chain. please refer to the code for more details. The Key information for chain registration (submitted by .config): address of Cross-chain data contract Chain id assigned by poly team Router id assigned by poly team Chain name Number of confirmation blocks Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:41:45 "},"add_chain/blockdata_verification.html":{"url":"add_chain/blockdata_verification.html","title":"Block Data Verification","keywords":"","body":"Block Data Verification Light Client Verification Poly provides a solution based on block header synchronization like the Simple Payment Verification (SPV) protocol in Bitcoin and Light Ethereum Subprotocol (LES) in Ethereum Synchronize an initial block header of the side chain to the poly chain for initializing, and then synchronize all the subsequent blocks of the side chain to the poly chain. Verify the block header based on the critical blockchain data such as mining difficulties and signature with validator set. Verify cross-chain transaction using Merkle state root hash in block header and Merkle proof generated by source chain. Check List It is crucial to know whether a chain can join poly using Light Client Verification, and the block header must contain the following information： The hash of the previous block header Merkle state root hash The necessary information to prove the legitimacy of the block header varies from different consensus mechanisms. [!NOTE] Please get in touch with the poly team for more support if your chain doesn't support techniques like Simple Payment Verification (SPV) protocol in Bitcoin or Light Ethereum Subprotocol (LES) in Ethereum. Essential Chain Elements Some features and attributes need to be clarified for joining the cross-chain ecosystem. These features are the critical elements for implementing the interface method for handling block headers and cross-chain events. Consensus Algorithm The Consensus Algorithm determines how blockchains select consensus validators, voters, and block producers for minting new blocks and bookkeeping block transactions. Developers need to clearly understand the consensus protocol of the blockchain to get sufficient information for validating block headers. For instance, for blockchains that use POS, one of the essential elements for verifying blocks are signatures from validator nodes, which requires the developers Know the consensus nodes' election process, and who are the consensus nodes in the next epoch. Initial Block of the Chain The initial block, usually the canonical block, whose block header needs to be submitted to the relay chain of the cross-chain ecosystem to verify the consequent block headers and transactions. Block Header Structure and Verification Methods The block header verification and processing method together with block header format, the serialization, and the deserialization methods are necessary for implementing the interface method of header sync solution Merkle Tree Structure, Generation and Verification Methods The Merkle tree structure, generation, and verification methods for the ledger records or transactions are necessary to verify cross-chain transactions. Given the trusted block header, its application state root can help confirm the validity of transaction proof and obtain the actual cross-chain transaction message. By having a Merkle proof and the correct block header, we can prove that a particular transaction or event occurred on the chain with certainty. Development Specifications This chapter shows developers how to cooperate with the poly network team to add a chain into the poly cross-chain ecosystem. Mainly for Header Sync because the Consensus Vote hardly needs any additional targeted development.The methods that developers need to implement: Block Header Synchronization Method, including header sync functions and their corresponding entrance functions. Handler for handling the cross-chain transaction with Merkle proof. Block Header Synchronization To implement cross-chain features for any chain, say Ethereum, there are two kinds of contracts that need to be deployed- Block header synchronization contract: This contract maintains the record of block headers of the relay chain on this chain. These block headers serve as means to verify cross-chain transactions. The interface methods that need to be implemented by the respective contracts are as follows: Block Header Synchronization Method Method Description SyncGenesisHeader Synchronizes the side chain's genesis block header (or canonical block header that has sufficient information to verify subsequent block headers) to the relay chain. The method is called one time only when initializing the side chain. It stores and handles the initial block header so that the subsequent block headers of blocks that contain cross-chain events can be verified and synchronized; please refer to the code for more details. SyncBlockHeader Consistently synchronizes block cycle change and cross-chain transaction block headers from the side chain to the relay chain; the relayers use this interface method to synchronize block headers, stores, and process block headers, fetches the consensus node info if block generation cycle changes; please refer to the code for more details. Block Header Synchronization Entrance Method Method Description SyncSideChainGenesisHeader It is the entrance method for synchronizing the genesis block header of the side chain to poly chain and synchronizing the genesis header of the poly chain to ccm contract of the side chain; please refer to the code for more details. The Key information for this method(submitted by .config): Service provider(endpoint) Url of side chain Selected genesis block height Essential information for verifying genesis headers may exist in header information already or need to be fetched from block headers from other block height Information required for the side chain block header verification Cross-Chain Management Cross-chain management contract: Every chain can have no more than one management contract. It creates cross-chain transactions that are transferred to the relay chain. All the service contracts that contain the business logic need to communicate with the management contract. The interface methods that need to be implemented by the respective contracts are as follows: Cross Chain Management Method Description MakeDepositProposal Creates cross-chain transactions invoked by service contracts. When a cross-chain function is carried out in the logic, a transaction includes a unique chain ID; the transaction is recorded in the Merkle tree. Act as the entrance of verifyFromTx, verifying, storing, and returning MakeTxParam for processing cross-chain steps. Please refer to the code for details. MakeDepositProposal: Requires: service *native.NativeService //Native Service that carries values of information of cross-chain events Returns: type verifyFromTx struct { TxHash []byte CrossChainId []byte //ChainId of source chain FromContractAddress uint64 //Cross Chain Management Contarct address of source chain ToChainId string //ChainId of target chain ToContractAddress uint64 //Cross Chain Management Contarct address of target chain Method []byte //Unlock or lock Args []byte } Method Description verifyFromTx Prepare block header and deserialized proof for verifyMerkleProof, decode the extra data from tx and construct MakeTxParam. Please refer to the code for details. verifyFromTx: Requires: service *native.NativeService proof []byte //the proof to be serialized and verified extra []byte //the transaction information that will be used for constructing verifyFromTx fromChainID uint64, //ChainId of source chain height uint32, //the block height corresponding to current transaction event sideChain *side_chain_manager.SideChain //source chain information that contains ccm contract address Returns: txParam *scom.MakeTxParam Method Description verifyMerkleProof Verify the Merkle proof obtained by the relayer generated from the source chain to ensure that all transactions included in this block header have been created and have occurred on the relay chain. Please refer to the code for details. verifyMerkleProof: Requires: blockData *types.Header //the blockheader corresponding to current transaction event proof []byte //the serialized proof Returns: Val []byte //the proof result for checking extra before constructing verifyFromTx Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-18 15:38:50 "},"add_chain/relayer.html":{"url":"add_chain/relayer.html","title":"Relayer","keywords":"","body":"Relayer Development Specifications for Relayer Poly relayer plays the role to relay cross chains messages and interact with cross chain manager contracts. There are two components in the implementation: Chain Listener Chain listener is used to fetch data from the chain (as source chain), including block headers, cross chain events emitted from cross chain manager contract and merkle proofs when it's used to verify the cross chain message in the Poly chain. type IChainListener interface { // Initialize with config Init(*config.ListenerConfig, *poly.SDK) error // Blocks to confirm Defer() int // New block check interval ListenCheck() time.Duration // Chain Id ChainId() uint64 // Optional: Fetch block header and header hash, used to submit to poly chain for verifications Header(height uint64) (header []byte, hash []byte, err error) // Optional: Last header sync state in poly chain. LastHeaderSync(uint64, uint64) (uint64, error) // Scan cross chain transactions included in the block Scan(uint64) ([]*msg.Tx, error) // Compose cross chain message before submit to poly chain Compose(*msg.Tx) error // Current chain height LatestHeight() (uint64, error) } Chain Submitter Chain submitter is used to submit messages/transactions to the chain, including bookkeeper changes of the poly chain and cross chain message to finalize as the last step. type IChainSubmitter interface { // Initialize with config Init(*config.SubmitterConfig) error // Submit message/transaction to the chain Submit(msg.Message) error // Start the thread Start(context.Context, *sync.WaitGroup, bus.TxBus, bus.DelayedTxBus, msg.PolyComposer) error // Process the cross chain message from poly chain ProcessTx(*msg.Tx, msg.PolyComposer) error } The poly-relayer project depends on the bridge-common library. Listed steps can be followed to register a new chain. Add chain ID in the bridge-common project. Add chain client SDK here for common usage. Add chain wallet SDK here for common usage. Implement interface IChainListener and IChainSubmitter for the new chain. Register ChainListener and ChainSubmitter in selectors located in the relayer.go file. Subcommands settxblock can set the scan initial height. setheaderblock can set the header sync height. status shows the current relayer status. Other Notes Please follow here for deployment guide. Wallet balance should be checked regularly to avoid out of fee balance issue. Mulitple wallet accounts can be created to increase message relay throughout. Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-20 17:15:23 "},"FAQ/template.html":{"url":"FAQ/template.html","title":"Integrating New Tokens","keywords":"","body":"Joining the Cross Chain Ecosystem Overview Poly cross chain ecosystem provides a platform for various different chains to interact and transfer data along with carrying out cross chain transactions. Any chain can freely join the ecosystem. However, the chains that support smart contracts can interact and transfer all kinds of information between chains, while the chains that do not support smart contracts are limited to cross chain asset transfer. There are three factors that determine whether a blockchain can join the Poly cross chain ecosystem: The system implements multiple interfaces either using smart contracts, or as core API that can be used to interact with the chain The chain needs to provide its block header format, the serialization and deserialization methods used, and the mode of signature verification in order to allow the relay chain to be able to process and verify block headers. The chain also needs to provide its merkle tree generation and verification method for the ledger records or transactions. This allows the relay chain to determine the legitimacy of the transaction records. Interface Requirements To implement cross chain features for any chain, say Ethereum, there are two kinds of contracts that need to be deployed- Block header synchronization contract: This contract maintains the record of block headers of the relay chain on this chain. These block headers serve as means to verify cross chain transactions. Cross chain management contract: Every chain can have no more than one management contract. It creates the cross chain transactions that are transferred to the relay chain. All the service contracts that contain the business logic need to communicate with the management contract. The interface methods that need to implemented by the respective contracts are as follows: Block Header Synchronization Contract Interface Method Description SyncGenesisHeader Synchronizes the relay chain's genesis block header (or another block header where a change in block generation cycle occurred), method is invoked one time only when the contract is initialized, stores and processes the genesis block header, fetches the consensus node info of the relay chain, please refer to the code for more details SyncBlockHeader Consistently synchronizes block cycle change and cross chain transaction block headers from the relay chain, relayer uses this interface method to synchronize block headers, stores and processes block headers, fetches the consensus node info if block generation cycle changes, please refer to the code for more details Cross Chain Management Contract Interface Method Description CreateCrossChainTx Creates cross chain transactions, invoked by service contracts when a cross chain function is carried out in the logic, transaction includes unique chain ID, transaction is recorded in the merkle tree, please refer to the code for more details ProcessCrossChainTx Fetches and processes cross chain transactions, invoked by the relayer when fetching transactions and merkle proofs, finds the merkle root of a transaction based on the block height (in the block header), verifies the legitimacy of transaction using the transaction parameters, invokes the service contract on the target chain, please refer to the code for details Cross Chain Interaction Between Chains The figure above illustrates the cross chain interaction between chain A to chain B. The user sends a cross chain request from chain A by invoking a dApp's cross chain interface, and on the target chain B the dApp's smart contract executes the necessary logic to produce the final result. Chain A and B implement the two contracts and other necessary interfaces, and anyone can develop an infrastructure for dApps around the cross chain management contract. The contracts deployed on chain A and chain B make up a complete cross chain dApp. The complete process flow from chain A to chain B is as follows: The user invokes the service contract on chain A, which then in turn invokes the cross chain management contract. The management contract transfers the parameters to the target chain and a cross chain transaction is created by management contract which is sent to the target chain based on block generation on chain A; Since there is no means of automatic data exchange between two chains, a relayer needs to be set up to transfer block header details from chain A to the relay chain's block header synchronization contract. It also fetches the management contract's response event from chain A which encapsulates the parameters passed by the user, and also fetches the merkle proof. Next, it groups this information together and sends it to the cross chain management contract. The management contract fetches the block headers from chain A, verifies whether or not the cross chain parameters and the proof are valid, and then transmits the necessary information to chain B in the form of an event; Chain B's relayer transfers the relay chain's block headers to chain B's block header synchronization contract. The relevant chain B cross chain transaction parameters and respective merkle proofs are fetched from the ledger records of the relay chain and transmitted to chain B's cross chain management contract; The management contract of chain B determines the legitimacy of the cross chain transaction information and then invokes the relevant target contract and completes the cross chain contract invocation; There are two different merkle proofs that are transferred to the relay chain: The merkle proof that is used to verify the legitimacy of cross chain transactions from chain A The merkle proof that is used to ensure that a transaction has been created and has occurred on the relay chain These merkle proofs help establish a trust mechanism for the cross chain ecosystem. Any chain can join the cross chain ecosystem by setting up the communication interface with the relay chain. Chain Elements to be Submitted to the Cross Chain Ecosystem Genesis Block of the Chain The genesis block's block header needs to be submitted to the consortium chain of the cross chain ecosystem so as to allow to it verify the consequent transactions and block headers on this chain. Another high-priority block such as block where the block generation cycle changes can also be submitted in place of the genesis block. Verification and Analysis Method, Block Header Structure The block header verification and processing method along with the block structure needs to be submitted so that the relay chain can verify the block headers that will be transferred from this chain. Merkle Tree Structure and Verification Method The merkle tree structure and the respective verification needs to be submitted to the relay chain such that cross chain transactions from this chain can be verified. Register the Chain on Relay Chain After setting up the necessary cross chain infrastructure, the chain can be registered on the relay chain. The registration API used is as follows: type RegisterSideChainParam struct { Address string ChainId uint64 Router uint64 Name string BlocksToWait uint64 CCMCAddress []byte } Parameter Description Address The wallet address that will be associated to this chain and will be authorized to modify the registration information ChainId Chain ID of this chain Router The routing protocol of the chain, existing routing protocols - 1:BTC, 2:ETH, 3:ONT, isomorphic chains can select existing protocol, rest must first define the respective protocol and then select Name Name of the blockchain network BlocksToWait No. of blocks to wait for in order to confirm finality CCMCAddress Cross Chain Management Contract Address of this chain As the cross chain ecosystem grows with time and more and more chains join in, different routing protocols will become a part of the system and isomorphic chains will directly be able to use the appropriate routing protocol. After the registration process is complete and the Cross Chain Council approves the application, the chain officially becomes a part of the cross chain ecosystem. Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2021-12-14 15:50:48 "},"Core_Smart_Contract/":{"url":"Core_Smart_Contract/","title":"Main Net","keywords":"","body":" MainNet | TestNet | DevNet | Zion_DevNet This's cross chain asset contract info ONLY in MAINNET mode, it's used to bind asset mapping in different chain, if the name ends with (s) on behalf of the asset is mapping. Contract Index(Chain-Chain Id) Bitcoin-1 Ethereum-2 Ontology-3 Neo Legacy-4 Switcheo-5 Bsc-6 Heco-7 Palette-8 Curve-10 OKEx-12 Neo N3-14 Heimdall-15 Polygon-17 Zilliqa-18 Arbitrum-19 xDAI-20 Avalanche-21 Fantom-22 Optimistic-23 Metis-24 Quick Index Poly Relayer Addresses Decentralized Application MainNet Nodes Router And ChainId Poly Relayer Addresses Chain Relayer Addresses ETH 0x7a1979f8dc3c1e25f506c77c4c0dd0c2113b6cd80x8c5e8eb7eb33d61d1e3c6e21fbc2fca6bd2f2d860x0da171a973608cad5bb78585b2ae5373fad2c483 HECO 0x7a1979f8dc3c1e25f506c77c4c0dd0c2113b6cd80x8c5e8eb7eb33d61d1e3c6e21fbc2fca6bd2f2d860x7573c6692c09b4299daaecd23e200673b71a55220xf124755e7551034067684c91718a9619d4cf9e730x0da171a973608cad5bb78585b2ae5373fad2c483 BSC 0xa3c419D2b37105A4ebE4f42698d220E59295a1900x446f136f81196b5708f3751aebd8025abbae87900xf5340ea4651470df9d23834fb382a5e532addae90xa0872c79900fed7a1a41e046d3665806a14c3bab0x5ad1361f2957b717cc3055bc20c7095b989a2c310x680766d06024619425b5a8feded05c20329323170x0da171a973608cad5bb78585b2ae5373fad2c483 OK 0x0da171a973608cad5bb78585b2ae5373fad2c4830xffca5f560be8ebabfe19cd8a6150f8978eb560df NEO ALjgBt3QdfoENa11e9yToy3bn16b685EZS ONT AM5F45WQyVSCYVpVbu8RK6cZZgk1GdDg2Q Polygon 0x5e46b85ad7c337068ad17efc82b4d9ff74ccd502 0x2b813b392ea7e3c75eb66cd94d525b478e66a5d9 0x5e46b85ad7c337068ad17efc82b4d9ff74ccd5020x2b813b392ea7e3c75eb66cd94d525b478e66a5d90x8D48BAf5463B389bF2F32De9e26A450b1207E90F0xCcF41F705063c6Eb6fF69FCB8F96Aaae6a9B07E50xf0f2653225B262Bc4a0dF1C983680Ee75aD9dD920x37DaFcb7eE0829439345Ff9cD0dFC2731e8D1c060xe74F3BA28e4d5358b8B8C5628d64d1d49F497ce60x37DaFcb7eE0829439345Ff9cD0dFC2731e8D1c060xC3bb9f891C90B2C6A6ef08514Fd382c2608a17820x5B3D4b4721999330186d93Bf7A9701d4a038029f Arbitrum 0xdb7e0850cd3c59313dee903a6c7a862499621bef0x3ce0372afcd3e44ccbf1378a68bcd83cafd25530 Xdai 0xEf4Bd3cfA47711DC034a5cbd2671122A272140aE Avalanche 0x8920954cab0F6A727eE0b1167F5ea878B116F6f30xAa30Cbb380F35DB3C1334aa7D6f736377Fb7B959 Fantom 0xA28AD792587e7a616e77bEdd4588B574657641b30xD49939b4139ae0c0d94ac105a9B9328033f864A5 Optimistic 0xdaA64a287B043DBeC2413B18FcAE6A0BBd7101130xAd371A8d57815F0a5dD60ed9Ff6DbD46A6D3D797 Metis 0xe682225aFff2CB1C5beB6E3dd0ACF523bE330cf70x21b59D73B4716a53cFE7804Baa31D0C1f75AE0cb Back to top Decentralized Application MainNet Nodes Chain IP Rpc Port Poly http://seed1.poly.network 20336 Neo Legacy http://seed9.ngd.network 11332 Neo N3 http://seed5.neo.org 10332 Back to top Btc Back to top Ethereum Type Contract Hash Desc CCMP 0x5a51e2ebf8d136926b9ca7b59b60464e7c44d2eb Cross Chain Manager Proxy contract hash ECCD 0xcf2afe102057ba5c16f899271045a0a37fcb10f2 Ethereum Cross Chain Data contract hash ECCM 0x14413419452Aaf089762A0c5e95eD2A13bBC488C Ethereum Cross Chain Manager contract hash Lock Proxy 0x250e76987d838a75310c34bf422ea9f1AC4Cc906 Ethereum Asset Proxy contract hash Poly Wrapper 0x2aA63cd0b28FB4C31fA8e4E95Ec11815Be07b9Ac lock entrance for auto cross chain tx with fee Wrapper 2.0 0xd380450e9e373bDC389951C54616edb2EE653524 wrapper_v2 that take native asset as fee Swapper 0xaf83ce8d461e8834de03a3803c968615013c6b3d curve entrance for auto cross chain tx with fee NFT Lock Proxy 0x2cdfc90250EF967036838DA601099656e74bCfc5 The NFT lockc proxy contract hash NFT Wrapper 0xe5204d62361A353C665668C858Ea213070CA159c The NFT Wrapper contract hash NFT Query 0xB2265A122814dA516318F727183a5D8FeCA8BaCE The NFT profile query contract hash PLT NFT Lock Proxy 0xD33e44F6E4fE37C4dF23c7171657721B9A725417 Contract hash of dedicated Palette NFT lock proxy PLT NFT Wrapper 0xD728e9844af285fA116806c273aa413686aE65e8 Contract hash of dedicated Palette NFT Wrapper PLT NFT Wrapper Fee collecotr 0x0E860F44d73F9FDbaF5E9B19aFC554Bf3C8E8A57 Fee collector address of dedicated Palette NFT wrapper feiyuan(PLT) 0x98D848869618CB0178388cA2318952d6495Fb654 Contract hash of palette nft testing asset pONT 0xcb46c550539ac3db72dc7af7c89b11c306c727c2 Ethereum Ontology Token WBTC 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599 WBTC USDC 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 USDC renBTC 0xeb4c2781e4eba804ce9a9803c67d0893436bb27d renBTC USDT 0xdac17f958d2ee523a2206206994597c13d831ec7 USDT DAI 0x6b175474e89094c44da98b954eedeac495271d0f DAI pWING 0xDb0f18081b505A7DE20B18ac41856BCB4Ba86A1a pWING sUSD 0x57ab1ec28d129707052df4df418d58a2d46d5f51 sUSD PAX 0x8e870d67f660d95d5be530380d0ec0bd388289e1 PAX pNEO 0x381225768DD2bd60D70482B51109D0DEFeE92503 pNEO pFLM 0xC6061CA95ad0378bDb12381206a1D723D14b72c4 pFLM UNI 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984 UNI OKB 0x75231f58b43240c9718dd58b4967c5114342a86c OKB YFI 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e YFI UNFI 0x441761326490cACF7aF299725B6292597EE822c2 UNFI CWS 0xac0104cca91d167873b8601d2e71eb3d4d8c33e0 CWS COOK 0xff75ced57419bcaebe5f05254983b013b0646ef5 COOK FEI 0x956F47F50A910163D8BF957Cf5846D573E7f87CA FEI TRIBE 0xc7283b66eb1eb5fb86327f08e1b5816b0720212b TRIBE 8PAY 0xFeea0bDd3D07eb6FE305938878C0caDBFa169042 8PAY YNI 0xdeaa665ab71785ccf576dc76e5fcb5a2283ea0c6 YNI REVO 0x155040625d7ae3e9cada9a73e3e44f76d3ed1409 REVO BLES 0xe796d6ca1ceb1b022ece5296226bf784110031cd BLES CVT 0xBe428c3867F05deA2A89Fc76a102b544eaC7f772 CVT FLUX 0x7645DdfEecedA57e41f92679c4aCd83c56A81D14 FLUX cDAI 0x5d3a536e4d6dbd6114cc1ead35777bab948e3643 cDAI cETH 0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5 cETH aDAI 0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d aDAI aETH 0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04 aETH KEL 0x4abb9cc67bd3da9eb966d1159a71a0e68bd15432 KEL SHIB 95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce SHIB CC 0xb7fbFf4Ce5200215c690cc95855e5d6C5236Ee9f CC STACK 0x56a86d648c435dc707c8405b78e2ae8eb4e60ba4 STACK SOFA 0xe29d80fcaadf1cc9f179d4c9759b2f5a0f5936dd SOFA BBANK 0xf4b5470523ccd314c6b9da041076e7d79e0df267 BBANK PLUT 0x44e288b2484e5a5297cf7193bf36690ea6801f95 PLUT LEV 0xbc194e6f748a222754C3E8b9946922c09E7d4e91 LEV TAP 0x7f1f2d3dfa99678675ece1c243d3f7bc3746db5d TAP KISHU 0xa2b4c0af19cc16a6cfacce81f192b024d625817d KISHU O3 0xee9801669c6138e84bd50deb500827b776777d28 O3 SOFA 0xe29d80fcaadf1cc9f179d4c9759b2f5a0f5936dd SOFA SPAY 0x58FaD9E3C3AE54c9BA98c3f0E4bF88aB3E8Cf3c5 SPAY mBTM 0x9288A57D6c5644B25569e9D1d5e9e328228D26c6 mBTM FREL 0x29ceddcf0da3c1d8068a7dfbd0fb06c2e438ff70 FREL DOV 0xac3211a5025414af2866ff09c23fc18bc97e79b1 DOV CELL 0x26c8afbbfe1ebaca03c2bb082e69d0476bffe099 CELL DMOD 0x5f6c5c2fb289db2228d159c69621215e354218d7 DMOD FILE 0xABDf43c835577f0983686a9851841D314385aafE FILE ROCKS 0x0829d2d5cC09d3d341E813c821B0cfAE272D9fb2 ROCKS COW 0x34965f73Cfa05Bf8d8aF37cB4af64Fa950605Ea8 COW TSX 0x734c90044a0ba31b3f2e640c10dc5d3540499bfd TSX PRY 0x3c81d482172cc273c3b91dd9d8eb212023d00521 PRY SPAY 0x58FaD9E3C3AE54c9BA98c3f0E4bF88aB3E8Cf3c5 SPAY MOZ 0x7bd82b320ebc28d8eb3c4f5fa2af7b14da5b90c3 MOZ STN 0xe63d6B308BCe0F6193AeC6b7E6eBa005f41e36AB STN CART 0x5C8C8D560048F34E5f7f8ad71f2f81a89DBd273e CART BKC 0xdfa9e19a4c4640dc0030718430aecfcda9121dbd BKC HD 0x6ce654aC973D326F89f0685E7459542641410eD9 HD GOF 0x488E0369f9BC5C40C002eA7c1fe4fd01A198801c GOF WETH 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 WETH ROSN 0x651Cd665bD558175A956fb3D72206eA08Eb3dF5b ROSE SPHRI 0x8A0cdfaB62eD35b836DC0633482798421C81b3Ec SPHRI SLD 0x1ef6a7e2c966fb7c5403efefde38338b1a95a084 SLD HDT 0x1cc945Be7d0D2C852d0096A8b5714b44eD21D5D3 HDT SIL 0x133Bb423d9248a336D2b3086b8F44A7DbFF3a13C SIL OOE 0x7778360f035c589fce2f4ea5786cbd8b36e5396b OOE BET 0x028a52032a7075a42585c037f069c62b49ebaa3d BET CBC 0x723b23F44B3E3a0fa029044B6326fBA41EDdF5E6 CBC DFC 0x1b2a76da77d03b7fc21189d9838f55bd849014af DFC USDC 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 USDC PKR 0x001a8ffcb0f03e99141652ebcdecdb0384e3bd6c PRK SBC 0xba5841109ec38e58b6184c0ab65ba59a9355ffe2 SBC CFB 0x5549fE6ED280e5A271A4c8c85277a5F07ec9bbDB CFB EPK 0xdaf88906ac1de12ba2b1d2f7bfc94e9638ac40c4 EPK ISM 0x5126efa050f6d3166110039c5ca48cc57b8e6ba2 ISM eCell 0x9b62ec1453cea5dde760aaf662048ca6eeb66e7f eCell PLT 0x0944d5848bd9f60a34ba92aea300d4286696eb76 PLT Back to top Ethereum: nrenBTC/nsBTC/nTUSD/nUSDC/nwBTC/nwETH/nDAI Type Contract Hash Desc nrenBTC 0x7757ffe3ac09bc6430f6896f720e77cf80ec1f74 normalized renBTC nsBTC 0x2dd56dc238d1fc2f9aac3793a287f4e0af1b08b4 normalized Synth sBTC nTUSD 0x886f6F287Bb2eA7DE03830a5FD339EDc107c559f normalized TrueUSD nUSDC 0x7f0ad0525cb8c17d3f5c06ceb0aea20fa0d2ca0a normalized USD Coin nUSDT 0x2205d2f559ef91580090011aa4e0ef68ec33da44 normalized Tether USD nwBTC 0xbb44b36e588445d7da61a1e2e426664d03d40888 normalized Wrapped BTC nwETH 0xe179198fd42f5de1a04ffd9a36d6dc428ceb13f7 normalized Wrapped Ether nDAI 0x7245ded8459f59b0a680640535476c11b3cd0ef6 normalized Dai Stablecoin nUNI-V2 0x6c5fa7a3c2cd98a689b1305bd38b56120fe15744 normalized Uniswap V2 xWETH 0x46b2E0224efb03D43eba88AB5A1995480e6A76b6 xWETH xWBTC 0xebd0e8988ac25a793dc27368f96a5a72e34efcd7 xWBTC xUSDT 0xa93727e8661d4f82cfd50f7d8fd3f38ec8493b84 xUSDT mBTC 0xcfc013b416be0bd4b3bede35659423b796f8dcf0 mBTC Back to top Ontology Type Contract Hash Desc Lock Proxy B: 86b4ab5d99037113867247a1e68f70e348c07597 L: 9775c048e3708fe6a1477286137103995dabb486 ONT with 9 decimal contract hash Poly Wrapper B: c93837e82178d406af8c84e1841c6960af251cb5 L: b51c25af60691c84e1848caf06d47821e83738c9 lock entrance for auto cross chain tx with fee pUSDC B: 061a07cd393aac289b8ecfda2c3784b637a2fb33 L: 33fba237b684372cdacf8e9b28ac3a39cd071a06 Ontology wrapped USDT (Ethereum) Cross Chain asset contract hash pWBTC B: 8037dd7161401417d3571b92b86846d34309129a L: 9a120943d34668b8921b57d31714406171dd3780 Ontology wrapped WBTC (Ethereum) Cross Chain asset contract hash pDAI B: 7b956c0c11fcffb9c9227ca1925ba4c3486b36f1 L: f1366b48c3a45b92a17c22c9b9fffc110c6c957b Ontology wrapped DAI (Ethereum) Cross Chain asset contract hash pETH B: df19600d334bb13c6a9e3e9777aa8ec6ed6a4a79 L: 794a6aedc68eaa77973e9e6a3cb14b330d6019df Ontology wrapped ERH (Ethereum) Cross Chain asset contract hash pUSDT B: ac654837a90eee8fccabd87a2d4fc7637484f01a L: 1af0847463c74f2d7ad8abcc8fee0ea9374865ac Ontology wrapped USDT (Ethereum) Cross Chain asset contract hash prenBTC B: 46c3051c553aaeb3724ea69336ec483f39fa91b1 L: b191fa393f48ec3693a64e72b3ae3a551c05c346 Ontology wrapped renBTC (Ethereum) Cross Chain asset contract hash ONTd B: 33ae7eae016193ba0fe238b223623bc78faac158 L: 58c1aa8fc73b6223b238e20fba936101ae7eae33 Ontology ONT decimal asset contract hash WING B: 00c59fcd27a562d6397883eab1f2fff56e58ef80 L: 80ef586ef5fff2b1ea837839d662a527cd9fc500 Ontology WING asset contract hash psUSD B: 17a58a4a65959c2f567e5063c560f9d09fb81284 L: 8412b89fd0f960c563507e562f9c95654a8aa517 Ontology psUSD asset contract hash pPAX B: 0dabee6055a1c17e3b4bcb15af1a713605b7fcfc L: fcfcb70536711aaf15cb4b3b7ec1a15560eeab0d Ontology pPAX asset contract hash pNEO B: 9a576d927dda934b8ce69f35ec2c1025ceb10e6f L: 6f0eb1ce25102cec359fe68c4b93da7d926d579a Ontology pNEO asset contract hash pUNI B: 89029ef258b82c5c3741fe25db91375e9301dc71 L: 71dc01935e3791db25fe41375c2cb858f29e0289 Ontology pUNI asset contract hash pOKB B: 8ea81002294e8117b43ab719bd03b7ad9fe67dc0 L: c07de69fadb703bd19b73ab417814e290210a88e Ontology pOKB asset contract hash pYFI B: 8c8dc28d10c22a66357240b920b569e32447d7af L: afd74724e369b520b9407235662ac2108dc28d8c Ontology pYFI asset contract hash pUNFI B: 6f560d392a8701d0931a7d61f8ac4bdcc050e9ab L: abe950c0dc4bacf8617d1a93d001872a390d566f Ontology pUNFI asset contract hash OOE B: 9f4650436a446f635db2db989e7ac067dcea240d L: 0d24eadc67c07a9e98dbb25d636f446a4350469f Ontology OOE asset contract hash Back to top Neo Type Contract Hash Desc ETHx B: 0x17c76859c11bc14da5b3e9c88fa695513442c606 L: 06c642345195a68fc8e9b3a54dc11bc15968c717 Eth asset hash in Neo chain ONTx B: 0x271e1e4616158c7440ffd1d5ca51c0c12c792833 L: 3328792cc1c051cad5d1ff40748c1516461e1e27 ONT asset hash in Neo chain CCMC B: 0x82a3401fb9a60db42c6fa2ea2b6d62e872d6257f L: 7f25d672e8626d2beaa26f2cb40da6b91f40a382 Cross Chain Manager Contract Lock Proxy B: 0xe7fb2e1d937e71dbbb512e6375746181127282e7 L: e782721281617475632e51bbdb717e931d2efbe7 The lock proxy bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx pnWETH B: 0x0df563008be710f3e0130208f8adc95ed7e5518d L: 8d51e5d75ec9adf8080213e0f310e78b0063f50d nWETH asset hash in Neo chain nNEO B: 0xf46719e2d16bf50cddcef9d4bbfece901f73cbb6 L: b6cb731f90cefebbd4f9cedd0cf56bd1e21967f4 NEP5 aeest hash of NEO cGAS B: 0x74f2dc36a68fdc4682034178eb2220729231db76 L: 76db3192722022eb7841038246dc8fa636dcf274 NEP5 aeest hash of GAS pONT B: 0xc277117879af3197fbef92c71e95800aa3b89d9a L: 9a9db8a30a80951ec792effb9731af79781177c2 ONTd asset hash in Neo chain pnUSDT B: 0x282e3340d5a1cd6a461d5f558d91bc1dbc02a07b L: 7ba002bc1dbc918d555f1d466acda1d540332e28 nUSDT asset hash in Neo chain pnWBTC B: 0x534dcac35b0dfadc7b2d716a7a73a7067c148b37 L: 378b147c06a7737a6a712d7bdcfa0d5bc3ca4d53 nWBTC asset hash in Neo chain pnUNI_V2_ETH_WBTC B: 0xc534d65c85c074887f58ed1f3bad7dfd739a525e L: 5e529a73fd7dad3b1fed587f8874c0855cd634c5 nUNI_V2_ETH_WBTC asset hash in Neo chain FLM B: 0x4d9eab13620fe3569ba3b0e56e2877739e4145e3 L: e345419e7377286ee5b0a39b56e30f6213ab9e4d Flamingo token pxWETH B: 0xb75022ea4846a10b31e3b14e1dec15672638ed0f L: 0fed38266715ec1d4eb1e3310ba14648ea2250b7 pxWETH pxWBTC B: 0x0f6b073b80e6384d691b7cf1cb8649582fbd7d10 L: 107dbd2f584986cbf17c1b694d38e6803b076b0f pxWBTC pxUSDT B: 0x962c16f9b8d031d8bf818f8d5e6d229f1d032d35 L: 352d031d9f226d5e8d8f81bfd831d0b8f9162c96 pxUSDT SWTH B: 0x3e09e602eeeb401a2fec8e8ea137d59aae54a139 L: 39a154ae9ad537a18e8eec2f1a40ebee02e6093e SWTH pMBTC B: 0xe4848b7c552afcc16ea1d4eee0f33880a0364cb8 L: b84c36a08038f3e0eed4a16ec1fc2a557c8b84e4 pMBTC Back to top Neo N3 Type Contract Hash Desc CCMC B: 0x5ba6c543c5a86a85e9ab3f028a4ad849b924fab9 L: b9fa24b949d84a8a023fabe9856aa8c543c5a65b Cross Chain Manager Contract Nep17 Proxy B: 0x385501cb0288b2953db767b0dc971478539456cb L: cb569453781497dcb067b73d95b28802cb015538 NEO B: 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 L: f563ea40bc283d4d0e05c48ea305b3f2a07340ef GAS B: 0xd2a4cff31913016155e38e474a2c06d08be276cf L: cf76e28bd0062c4a478ee35561011319f3cfa4d2 bNEO B: 0x48c40d4666f93408be1bef038b6722404d9a4c2a L: 2a4c9a4d4022678b03ef1bbe0834f966460dc448 fWBTC B: 0xd6abe115ecb75e1fa0b42f5e85934ce8c1ae2893 L: 9328aec1e84c93855e2fb4a01f5eb7ec15e1abd6 fWETH B: 0xc14b601252aa5dfa6166cf35fe5ccd2e35f3fdf5 L: f5fdf3352ecd5cfe35cf6661fa5daa5212604bc1 fUSDT B: 0xcd48b160c1bbc9d74997b803b9a7ad50a4bef020 L: 20f0bea450ada7b903b89749d7c9bbc160b148cd pONT B: 0x8122bc2212ec971690a044b37a6f52a9349b702b L: 2b709b34a9526f7ab344a0901697ec1222bc2281 Back to top Binance Smart Chain Type Contract Hash Desc CCMP 0xABD7f7B89c5fD5D0AEf06165f8173b1b83d7D5c9 Cross Chain Manager Proxy contract hash ECCD 0x11e2A718d46EBe97645b87F2363AFE1BF28c2672 BSC Cross Chain Data contract hash ECCM 0x1c9Ca8aBb5da65d94DaD2E8Fb3f45535480d5909 BSC Cross Chain Manager contract hash Lock Proxy 0x2f7ac9436ba4B548f9582af91CA1Ef02cd2F1f03 BSC Asset Proxy contract hash Lock Proxy_1 0xfB571d4dd7039f96D34bB41E695AdC92dF4A332f BSC Asset Proxy contract hash Lock Proxy-PIP4 0x960Ff3132b72E3F0b1B9F588e7122d78BB5C4946 BSC Asset Proxy with LP contract hash Poly Wrapper 0xE3D0FB6E3cB5DA61EB18b06D035052441009d1E6 lock entrance for auto cross chain tx with fee Wrapper 2.0 0x4b0CFdb5e1Ca898a225F9E14AfF9e4eF178a10d2 wrapper_v2 that take native asset as fee Wrapper 3.0 0xbc3B4E7517c06019F30Bf2f707eD2770b85f9928 wrapper_v3 that take native asset as fee Swapper 0x00b93851e3135663AAeC351555EddEE5B01325e6 Curve entrance for auto cross chain tx with fee NFT Lock Proxy 0x2cdfc90250EF967036838DA601099656e74bCfc5 The NFT lockc proxy contract hash NFT Wrapper 0xe2bD9dD8FAF5C4C2087Ab82eC7E63F619CcAa152 The NFT Wrapper contract hash NFT Query 0x02015dBb2Dc25Cc7313D7EDb4785c2C46F3B7FD2 The NFT profile query contract hash pNEO 0xb119b3b8e5e6eeffbe754b20ee5b8a42809931fb NEO mapping asset in BSC pETH 0xb9478391eec218defa96f7b9a7938cf44e7a2fd5 ETH mapping asset in BSC pUSDT 0x48389753b64C9e581975457332E60dC49325A653 USDT mapping asset in BSC pDAI 0x8F339ABc2A2a8a4D0364C7e35F892c40FBFb4BC0 DAI mapping asset in BSC pUSDC 0x0dBbf67Fb78651D3F6407A421040f1503b486693 USDC mapping asset in BSC psUSD 0x89bcD91F7922126C568436841b16d036528E9714 sUSD mapping asset in BSC pCWS 0xbcf39f0edda668c58371e519af37ca705f2bfcbd pCWS mapping asset in BSC SHARE 0x07721c5b7536293e9cd9861E0De5f43fC3ac3c2e SHARE mapping asset in BSC COOK 0x965b0Df5BDA0E7a0649324D78f03D5F7F2De086a COOK mapping asset in BSC FEI 0xB096d364dBdF04F6230cd5D1aA5EE1C91FC7A819 FEI mapping asset in BSC TRIBE 0x7bE1BE4FDc499bC6FeC8d4a4C0936BAD7799565A TRIBE mapping asset in BSC 8PAY 0xFeea0bDd3D07eb6FE305938878C0caDBFa169042 8PAY mapping asset in BSC HMDX 0xaee4164c1ee46ed0bbc34790f1a3d1fc87796668 MDX mapping asset in BSC REVO 0x155040625d7ae3e9cada9a73e3e44f76d3ed1409 REVO mapping asset in BSC BLES 0x393d87e44c7b1f5ba521b351532c24ece253b849 BLES mapping asset in BSC CVT 0xD27547A4e3bA5FBc8ac6C2477151aB8E17e4D341 CVT mapping asset in BSC bFLUX 0x1ab6478b47270ff05af11a012ac17b098758e193 FLUX mapping asset in BSC KEL 0x4e1b16Ef22935A575a6811D4616f98C4077E4408 KEL mapping asset in BSC ISM 0xcc6133136a75d464110f4305e3be0555e1daac3f ISM mapping asset in BSC CC 0xb7fbFf4Ce5200215c690cc95855e5d6C5236Ee9f CC mapping asset in BSC STACK 0x6855f7bb6287F94ddcC8915E37e73a3c9fEe5CF3 STACK mapping asset in BSC BUSD 0xe9e7cea3dedca5984780bafc599bd69add087d56 BUSD SOFA 0xab4ab24a9eb4afe24d6209bb3ecfc381319e33d1 SOFA mapping asset in BSC BBANK 0xf4b5470523ccd314c6b9da041076e7d79e0df267 BBANK mapping asset in BSC PLUT 0xFa502E90F5D76F92Fb3ab86E8c329bED15dc2bD9 PLUT mapping asset in BSC LEV 0xbc194e6f748a222754C3E8b9946922c09E7d4e91 LEV mapping asset in BSC TAP 0xfD799ddCCA8ab5c1ad8a3D64a58d4e907C9d0B71 TAP mapping asset in BSC O3 0xee9801669c6138e84bd50deb500827b776777d28 O3 mapping asset in BSC SOFA 0x54f93c0dc067af625dd63da1ce12bd44329902d9 SOFA mBTM 0x79f8ed0bc943000ddfd798a66760862937829183 mBTM SPAY 0xbcf39f0edda668c58371e519af37ca705f2bfcbd SPAY FREL 0xfd5af95C12446b60d23e16A4EA95690cE942e5dC FREL DOV 0xc9457161320210D22F0D0d5fC1309Acb383d4609 DOV CELL 0x0FFb06aabbA09b1D6E9Bd78D97791B0eFAc9536a CELL BOPR 0xFd4677B9FB00355CbE87EC54f42B79a008b4c622 BOPR DMOD 0x002D8563759f5e1EAf8784181F3973288F6856e4 DMOD FILE 0xA8F19840e08dC3f134FF45062b953a2B14E02F5A FILE ROCKS 0x0829d2d5cC09d3d341E813c821B0cfAE272D9fb2 ROCKS mBTC 0xf4e3e2f3e0657ba3f6951c8716b28ddbb269b6ff mBTC COW 0x422E3aF98bC1dE5a1838BE31A56f75DB4Ad43730 COW TSX 0x270388e0ca29cfd7c7e73903d9d933a23d1bab39 TSX PRY 0x3c81d482172cc273c3b91dd9d8eb212023d00521 PRY SPAY 0x13A637026dF26F846D55ACC52775377717345c06 SPAY MOZ 0xe4b22193d68f18f8e8eb3a26f4d64cb6d4573022 MOZ STN 0xf7fb08c187e6cd1f2149e6c818d0b6d4d4ef1430 STN GOF 0x2bcF9c1861FaE2d5a7D2b3242b71e2a8d461F61e GOF CART 0x5C8C8D560048F34E5f7f8ad71f2f81a89DBd273e CART ETH 0x2170ed0880ac9a755fd29b2688956bd959f933f8 ETH ROSN 0x651Cd665bD558175A956fb3D72206eA08Eb3dF5b ROSE HKR 0xb23236a6d1af62bd4809e0ef933cfd7a6917cd68 HKR HAI 0x971fe540feff9d91d6fbb93c27fbb527bfb96a3e HAI DOGK 0x42b1495e9bf2de0ae6510d50584a0799166542f7 DOGK SPHRI 0x8B7a0007F6E0ddb16cd14f34af3306947fC698a6 SPHRI SLD 0x1ef6a7e2c966fb7c5403efefde38338b1a95a084 SLD BTCB 0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c Binance-Peg BTCB Token SIL 0x133Bb423d9248a336D2b3086b8F44A7DbFF3a13C SIL OOE 0x9029fdfae9a03135846381c7ce16595c3554e10a OOE BET 0x028a52032a7075a42585c037f069c62b49ebaa3d BET CBC 0x793cEa0F1003411396b3A81A77d92Fe37015E7A9 CBC DFC 0x1b2a76da77d03b7fc21189d9838f55bd849014af DFC USDC 0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d USDC PKR 0xc49dde62b4a0810074721faca54aab52369f486a PKR WING 0x3cb7378565718c64ab86970802140cc48ef1f969 WING ONG 0x308bfaeaac8bdab6e9fc5ead8edcb5f95b0599d9 ONG SBC 0xDA22650f4739C9d0b4B4b0915A4CAfDE6C52C480 SBC CFB 0xf36538cBE8a85E418BBA643E8259de38DD02de43 CFB EPK 0x87ecea8512516ced5db9375c63c23a0846c73a57 EPK DOG 0x8dc27752faff2ade6efba8054e2f207506247f43 DOG C 0x1f09c5fa5522036c7cc7cddea46e9961ca01ead2 C WIT 0x633a87ca89ce86ed06a807e4af57ffe486980374 WIT YNI 0x91cb98f1b1954253f03f82579d683732bae6813f YNI Metis e552fb52a4f19e44ef5a967632dbc320b0820639 Metis LP Metis 0x2c0Ad043f17572906cb5A4Dc388Ef6C5F01a2827 LP Metis Back to top Huobi Eco Chain(HECO) Type Contract Hash Desc CCMP 0xABD7f7B89c5fD5D0AEf06165f8173b1b83d7D5c9 Cross Chain Manager Proxy contract hash ECCD 0x11e2A718d46EBe97645b87F2363AFE1BF28c2672 Heco Cross Chain Data contract hash ECCM 0x7109c5F898C5667941B3D2A6451b4bFBeD2bdBbF Heco Cross Chain Manager contract hash Lock Proxy 0x020c15e7d08A8Ec7D35bCf3AC3CCbF0BBf2704e6 Heco Asset Proxy contract hash Poly Wrapper 0x4fE451186c0D69205ACc1fA00FD75fc6d71e47eE lock entrance for auto cross chain tx with fee Wrapper 2.0 0x1B0C55be400e2a7D924032B257Fbc75Bbfd256E7 wrapper_v2 that take native asset as fee Swapper 0xD98Ee7Ca1B33e60C75E3cd9493c566fc857592c8 Curve entrance for auto cross chain tx with fee NFT Lock Proxy 0x2cdfc90250EF967036838DA601099656e74bCfc5 The NFT lockc proxy contract hash NFT Wrapper 0xe2bD9dD8FAF5C4C2087Ab82eC7E63F619CcAa152 The NFT Wrapper contract hash NFT Query 0x56C9491F2aC2Bc623AB890D2Db16C98E1aBd1FBd The NFT profile query contract hash pNEO 0x6514a5ebff7944099591ae3e8a5c0979c83b2571 NEO mapping asset in Heco pETH 0x8c0859c191d8f100e4a3c0d8c0066c36a0c1f894 ETH mapping asset in Heco pDAI 0x643f3914fB8eDE03d932c79732746a8c11Ae470A DAI mapping asset in Heco pUSDC 0xe85631B817923487ba40263144eEfF532Cff10a2 USDC mapping asset in Heco pUSDT 0xA7d1aAc3c9bf61559c25f94132a9f801E8B5F97E USDT mapping asset in Heco psUSD 0x002E47D940dfd177dc0Fe78321E17EF84676985D sUSD mapping asset in Heco SHARE 0x41198c6736d23734E6d17a6F0B4f2D15d2621A3a SHARE asset in Heco pFLM 0xa0e910ce120d6220ceb3ad0000dbb4843eb912f5 FLM asset in Heco SWTH 0x14127C943752d265B21D6963F8576A05c5c8e59c SWTH asset in Heco COOK 0x74189862B069e2Be5f7c8E6ff08eA8E1B1948519 COOK asset in Heco FEI 0x485cdBFF08A4F91a16689E73893a11ae8B76af6D FEI asset in Heco TRIBE 0x38999Fa3a7320bD2c3609BF0f8cB5CD4C11D3Fe1 TRIBE asset in Heco MDX 0x25d2e80cb6b86881fd7e07dd263fb79f4abe033c MDX asset in Heco CVT 0xD27547A4e3bA5FBc8ac6C2477151aB8E17e4D341 CVT asset in Heco hFLUX 0xd10852DF03Ea8b8Af0CC0B09cAc3f7dbB15e0433 hFLUX asset in Heco hcDAI 0x110Fa5B7016aFd78eFCCe06261C04fB6cFC06B3a hcDAI asset in Heco hcETH 0x839d680F0E1033A5548D9A8093644384Ea5C33da hcETH asset in Heco haDAI 0x69097F031dE95fb02bC023CB9Fa98E0E633f28a8 haDAI asset in Heco SHIB 0xc38072aa3f8e049de541223a9c9772132bb48634 SHIB asset in Heco ISM 0x348ccc5a616abae8a639457fc469917b03d938c3 ISM asset in Heco CC 0xb7fbFf4Ce5200215c690cc95855e5d6C5236Ee9f CC mapping asset in HECO HUSD 0x0298c2b32eae4da002a15f36fdf7615bea3da047 HUSD SOFA 0x8cce7b6dbff23ef744b12a462ec275272dee5e83 SOFA PLUT 0xC6d194E7fb72c7b1b7b1D5199468fA7be1E1cA1c FLUT mapping asset in HECO LEV 0xbc194e6f748a222754C3E8b9946922c09E7d4e91 LEV mapping asset in HECO KISHU 0x06943f317b0111bd5d3eff7e83f33b05914721c5 KISHU mapping asset in HECO O3 0xee9801669c6138e84bd50deb500827b776777d28 O3 mapping asset in HECO SOFA 0x829fdfcdf7d6ef9a07f5f53af7247d2da94da8fb SOFA mBTM 0xd97b21993187391f44d497dd4d961122e0a6f958 mBTM BNB 0x4f99d10e16972ff2fe315eee53a95fc5a5870ce3 BNB COPR 0x46EFB7724364ded21b3598519D754323A4f66EC9 COPR FILE 0x4A011A4eF0253Cc32CCcdA57d2b0C212bFd86771 FILE COW 0x80861a817106665bca173db6ac2ab628a738c737 COW GOF 0x2aafe3c9118db36a20dd4a942b6ff3e78981dce1 GOF BKC 0x36278870a563f5f2964016eed3a6e329375f6a6e BKC HD 0xa161658ad97f70915136b773beecb72cde221f31 HD ETH 0x64ff637fb478863b7468bc97d30a5bf3a428a1fd ETH HKR 0xa74b0514b403bdb573bf22df0062d43f6498a164 HKR HAI 0x7663bc3ae9858cae71722aedee364e125c278bdf HAI DOGK 0x42b1495e9bf2de0ae6510d50584a0799166542f7 DOGK HDT 0x3d5d17243307b1e236bfbded127a7f4d0b62e185 HDT HBTC 0x66a79d23e58475d2738179ca52cd0b41d73f0bea Heco-Peg HBTC Token HUSD 0x0298c2b32eae4da002a15f36fdf7615bea3da047 HUSD OOE 0x40817e1ab07fc872b7af6a959c4b7a8febf6c4ab OOE BET 0x028a52032a7075a42585c037f069c62b49ebaa3d BET EPK 0x2e969f4826466e3ef52eae153f6368d17ec5d8f4 EPK DOG 0x099626783842d35c221e5d01694c2b928eb3b0ad DOG C 0xfed613cdd4182b73a032fe1f03bd7872465010f8 C CBC 0x14e449473251F2D9D4eA5D26199F002C214b2475 CBC WIT 0xabf5f4f5856dac0f7d7df56be92ac04f4d0fc0f0 WIT eCell 0xcf5fac84e13622ef1fc538c2f83c710abc816f92 eCell Back to top Curve Type Contract Hash Desc CCMP 0x25293B33DE6c7097A27b6c12888a15e0AbFf3A00 Cross Chain Manager Proxy contract hash ECCD 0xd57Dc9E14Be808b514D30fC5e46a07Ba1e5Cf473 Cross Chain Data contract hash ECCM 0x89D15F45597816C90cbafd32D0Bb8Fc99bE0B76f Cross Chain Manager contract hash SwapProxy 0x34d4a23A1FC0C694f0D74DDAf9D8d564cfE2D430 Asset Proxy contract hash BindProxy 0x46829549E0a5Eccb04737eEaC6cE8826169BA1f1 Curver bindproxy contract hash Pool-1 0xa6157DaBDda80F8c956962AB7739f17F54BAAB7F USDT-BUSD-HUSD pool address in Curve Pool-1-LP 0x23dF75A64Dc59d2884BE25021d7A424B18709A41 LP token of pool-1 USDT 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 USDT mapping asset in Curve BUSD 0xBFC0457548BB90D54123a71a7310BaDa8f4662c0 BUSD mapping asset in Curve HUSD 0x0926B2DB9D053E0022419093CCd57b92301fB736 HUSD mapping asset in Curve Pool-2 0x560470C9C6E45fBe47c792E90B691015f0614A9c ETH pool address in Curve Pool-2-LP 0x0C1EE7a93bd92437f0528aDcf4a8607244A946DE LP token of pool-2 WETH 0x83f28703A5761Fe96e4c68Ea5861519f59928DDA Eth WETH mapping asset in Curve BETH 0xdCb4775d6F7AA96B2E850b9ee6674FC6A47b85F6 Bsc ETH mapping asset in Curve HETH 0xF554231385f15C89A5A5Eb3f96C1A9dfaCA9678d Heco ETH mapping asset in Curve Pool-3 0xd709d95479Fe244b27A34441D497859960893Ec6 BNB pool address in Curve Pool-3-LP 0xc0Fa229d87cA58B80C3D4F1254df5214DdfE4fF7 LP token of pool-3 EBNB 0xB7a66a6007606c64bD3b2D771fFA793Ada28E7e4 Eth BNB mapping asset in Curve WBNB 0x351a102B2c1a9121f7926E3f47c36Ee947786B3F Bsc WBNB mapping asset in Curve Pool-4 0x6c27318a0923369de04df7Edb818744641FD9602 BTC pool address in Curve Pool-4-LP 0xCC0061012d49331Bf6Edf8d7a8cceC087F81E982 LP token of pool-4 WBTC 0x7648bDF3B4f26623570bE4DD387Ed034F2E95aad Eth WBTC mapping asset in Curve BTCB 0x2367e9Cf3355EA714236e6719B91336D29D6D59D Bsc BTC mapping asset in Curve HBTC 0x285F30fD447598178d3B8adBdc0839B0c72C26eb Heco BTC mapping asset in Curve Pool-5 0x6C12415f6Ca74e5D1F091415858de7E188B0884C BTC pool address in Curve Pool-5-LP 0x81241b49e73e79d920c6ea71ABc84409DE766055 LP token of pool-5 ETH-USDC 0xAed3E54b7229d7b8f3970f0a03D98708716de96b Eth USDC mapping asset in Curve BSC-USDC 0xE4444f57b4Bd843EC065BdaF67a2e9b8c1ee4f5b Bsc USDC mapping asset in Curve MATIC-USDC 0xbc44977D9ad3CC55fd88fBe34616EBE8174f2c3f MATIC USDC mapping asset in Curve Pool-7 0x1EEcE3d9fD152b73728aba136BB6E1f3ebd2Afa2 USDT pool address in Curve Pool-7-LP 0xDB721696803539f30Bcb6FD2559c018a32BE9134 LP token of pool-7 ETH-USDT 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 Eth USDT mapping asset in Curve BSC-USDC 0x9AC8B67Febd3E53c8f08E5A481A9D94Ea51Fb07D Bsc USDT mapping asset in Curve MATIC-USDC 0x77b81bd926f9E047ae976B674Af1922b5f34aDD7 MATIC USDT mapping asset in Curve Arbitrum-USDC 0x72b70b41A59C9e849FF70de60CEbee4D49612A7F Arbitrum USDT mapping asset in Curve Pool-8 0x6a07A0520C122f247Df2Fa3129Cc85F70f5485Fc USDC pool address in Curve Pool-8-LP 0xDB721696803539f30Bcb6FD2559c018a32BE9134 LP token of pool-8 ETH-USDC 0xAed3E54b7229d7b8f3970f0a03D98708716de96b Eth USDC mapping asset in Curve ARB-USDC 0xE397Abf9beD31911a32e3723c0ACd751fF7Df250 Arbitrum USDC mapping asset in Curve AVAX-USDC 0xA724b1480F761b32c6C70B80709C46ED24383B36 Avalanche USDC mapping asset in Curve XDAI-USDC 0xa2546C60b3c4f4223b52c4cCe68CDBf5B03960B4 XDAI USDC mapping asset in Curve OP-USDC 0xa70Bc553b23dCe0001438654f8CaF0A39d0Df775 Optimistic USDC mapping asset in Curve Pool-10 0x58AD8FF9B7A9c85EeaDedCFdAD1f9bCfF7DA47f3 USDT pool address in Curve Pool-10-LP 0x9998753c05B9044488729740E0dB6ec21bdf1034 LP token of pool-10 ETH-USDT 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 Eth USDT mapping asset in Curve OP-USDT 0xd357cAB6e1B6e2520440D501D1a12349fddD000E Optimistic USDT mapping asset in Curve FTM-USDT 0xDBa1E44e82f7044DC7d6c964f64a32d1bBBaaeaB Fantom USDT mapping asset in Curve OK-USDT 0x11ea9E229E022D0498db2Ee4369FFf1238FbEE4f OK USDT mapping asset in Curve Back to top OKEx Type Contract Hash Desc CCMP 0x4739fe955BE4704BcB7d6a699823F5B29217Baf6 Cross Chain Manager Proxy contract hash ECCD 0xdb3A0149f3155cC1B6890FE382d309dB4b322630 OKEx Cross Chain Data contract hash ECCM 0x6CE66Cf89A17B5C22e757cca01beAD901fC8C7f2 OKEx Cross Chain Manager contract hash Lock Proxy 0x9a3658864Aa2Ccc63FA61eAAD5e4f65fA490cA7D OKEx Asset Proxy contract hash Poly Wrapper 0x11e2A718d46EBe97645b87F2363AFE1BF28c2672 lock entrance for auto cross chain tx with fee Wrapper 2.0 0xbd4a08577476A521C41a21EF3f00b045b74175d5 wrapper_v2 that take native asset as fee Swapper 0xb68C0D092842a4a0272867D89245FCD7e7fcA3Eb Curve entrance for auto cross chain tx with fee Wing 0x7a47ab305b8a2a3f4020d13fa9ef73cddcc0e7d4 Wing mapping asset in OKEx Flux 0xd0C6821aba4FCC65e8f1542589e64BAe9dE11228 Flux mapping asset in OKEx mBTM 0xB46985584980c17860CE396667bc74d94Bad4eBF mBTM mapping asset in OKEx SXC 0x0a3c69b510eA47624eE4D4C5b630ae06cd33eB73 SXC COOK 0x7f1ae1C42f5f967c0E1ABa3ed7b6D62f88BE4275 COOK COW 0x05874E7665c249696c261F638D80C2C3c5C286DD COW WIT 0x3db637a11d28b75d66a0ea2e2ad454f760d2e8ce WIT OOE 0x40817e1ab07fc872b7af6a959c4b7a8febf6c4ab OOE Back to top Polygon Type Contract Hash Desc CCMP 0x5366ea2b5b729ff3cef404c2408c8c60cc061b71 Cross Chain Manager Proxy contract hash ECCD 0x7cea671dabfba880af6723bddd6b9f4caa15c87b Polygon Cross Chain Data contract hash ECCM 0xB16FED79a6Cb9270956f045F2E7989AFfb75d459 Polygon Cross Chain Manager contract hash Lock Proxy 0x28ff66a1b95d7cacf8eded2e658f768f44841212 Polygon Asset Proxy contract hash Poly Wrapper 0x4493fb5dc195900938CC23096C7EEdEfc434e283 lock entrance for auto cross chain tx with fee Wrapper 2.0 0xB88f13682F3C602aCD84B4b2eEB96A9DD75Afd89 wrapper_v2 that take native asset as fee NFT Lock Proxy 0x359596463F4F4e5969330D74504A614c22885D62 The NFT lockc proxy contract hash NFT Wrapper 0x6cEB2EC1E82880812F6aA60DfA260679D6C8323d The NFT Wrapper contract hash NFT Query 0x6AF09953541c7b4d0023c5E5a4241F82C68E986C The NFT profile query contract hash Swapper 0xaC57280B3A657A2e8D1180493C519a476D208F61 Curve entrance for auto cross chain tx with fee O3 0xee9801669c6138e84bd50deb500827b776777d28 O3 USDC 0x2791bca1f2de4661ed88a30c99a7a9449aa84174 USDC SXC 0x46d3EC8CE3eC767414F16FE12176De23E3E5B46A SXC OOE 0x9d5565da88e596730522cbc5a918d2a89dbc16d9 OOE ONTd 0xD4814770065F634003A8d8D70B4743E0C3f334ad ONTd ONG 0x727e6cA466a7522D54F1f0b97a344f64e65d2767 ONG CBC 0x14e449473251F2D9D4eA5D26199F002C214b2475 CBC WIT 0xaacd1ba28e00a480ed7cb5284b7719c0bd694a94 WIT TSX 0xF11de26883EB2EBF9877a01703DDC1eB619094E6 TSX Back to top Note B means big-endian, we can search the contract transaction history in corresponding explorer. L means little-endian, we usually use it as the asset hash input when we do binding asset hash operation. Back to top Switcheo Type Denom (coin name) Asset/Contract Hash Desc Back to top Palette Type Contract Hash Desc ECCD 0x250e76987d838a75310c34bf422ea9f1AC4Cc906 Palette Cross Chain Data contract hash ECCM 0x1b02EEE12A7bF02922113a70d3D343De4b43f776 Palette Cross Chain Manager contract hash CCMP 0x7622058504412D5183352A7d350653DfFe58b1DC Cross Chain Manager Proxy contract hash PLT Wrapper 0x0A9C412633465fdeE4861CeE02987386100bEAe6 lock entrance for auto cross chain tx with fee NFT Lock proxy 0xdCA22CbA4a2d3dA3883b479f824F2147efed1718 Contract hash of palette lock proxy NFT Wrapper 0x41985E2A8826233618392e38d46d2060fbCC3F2A Contract hash of palette NFT native wrapper NFT Query 0x0F05299e6ab0FbB3258296d3Ae7bF6Ae53A0c414 Contract hash of palette NFT query NFT Fee Collector 0x0E860F44d73F9FDbaF5E9B19aFC554Bf3C8E8A57 fee collector address of palette NFT wrapper feiyuan(PLT) 0x0000000000000000000000000000000000001003 Test asset hash of palette NFT contracts Back to top Zilliqa Type Contract Hash Desc CCMP 0xfeafd3bb477c2d29ed078256698c7d9c37abcf20 Zilliqa Cross Chain Manager Proxy contract hash CCM 0xac9f601679a285c3ff0d95239a1dc7a7983df32d Zilliqa Cross Chain Manager contract hash Lock Proxy 0xd73c6b871b4d0e130d64581993b745fc938a5be7 Zilliqa Lock Proxy contract hash Back to top Arbitrum Type Contract Hash Desc CCMP 0xABD7f7B89c5fD5D0AEf06165f8173b1b83d7D5c9 Arbitrum Cross Chain Manager Proxy contract hash CCM 0x7ceA671DABFBa880aF6723bDdd6B9f4caA15C87B Arbitrum Cross Chain Manager contract hash ECCD 0x11e2A718d46EBe97645b87F2363AFE1BF28c2672 Arbitrum Cross Chain Data contract hash Lock Proxy 0x2f7ac9436ba4B548f9582af91CA1Ef02cd2F1f03 Arbitrum Lock Proxy contract hash Swapper 0x7E418a9926c8D1cbd09CC93E8051cC3BbdfE3854 Arbitrum Swapper contract hash USDT 0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9 Arbitrum USDT contract hash Poly Wrapper 0xCf018d59B4728d073bd961ABe6A8024A8F0A3cdB lock entrance for auto cross chain tx with fee Wrapper 2.0 0x0f8C16BA16E58525Eb2aDc231ff360cfa00bB527 wrapper_v2 that take native asset as fee Back to top xDAI Type Contract Hash Desc CCMP 0x28FF66a1B95d7CAcf8eDED2e658f768F44841212 xDAI Cross Chain Manager Proxy contract hash CCM 0x2f7ac9436ba4B548f9582af91CA1Ef02cd2F1f03 xDAI Cross Chain Manager contract hash ECCD 0x4D6934E2bb813f48DC0A7bf7Ead0365D9c894163 xDAI Cross Chain Data contract hash Lock Proxy 0x77F3A156e8E597C64d4a12d62f20a0d2ff839dD5 xDAI Lock Proxy contract hash Swapper 0xb68C0D092842a4a0272867D89245FCD7e7fcA3Eb xDAI Swapper contract hash Poly Wrapper 0xD5d63Dce45E0275Ca76a8b2e9BD8C11679A57D0D lock entrance for auto cross chain tx with fee Wrapper 2.0 0x74A7f2A3aFa8B0CB577985663B5811901A860619 wrapper_v2 that take native asset as fee Back to top Avalanche Type Contract Hash Desc CCMP 0xE3D0FB6E3cB5DA61EB18b06D035052441009d1E6 Avalanche Cross Chain Manager Proxy contract hash CCM 0x2aA63cd0b28FB4C31fA8e4E95Ec11815Be07b9Ac Avalanche Cross Chain Manager contract hash ECCD 0x6c2A37Cf23E21EF3cFC45FdE2C0E1d3a9e7365f9 Avalanche Cross Chain Data contract hash Lock Proxy 0xd3b90E2603D265Bf46dBC788059AC12D52B6AC57 Avalanche Lock Proxy contract hash Swapper 0xb68C0D092842a4a0272867D89245FCD7e7fcA3Eb Avalanche Swapper contract hash Poly Wrapper 0x287Bd66753f0cA8e9C2171D782DF39e4C28cfd65 lock entrance for auto cross chain tx with fee Wrapper 2.0 0xf06587dE89e289Ce480CDf21109A14547eb33A0d wrapper_v2 that take native asset as fee COOK 0x637afeff75ca669fF92e4570B14D6399A658902f COOK Back to top Fantom Type Contract Hash Desc CCMP 0xE3D0FB6E3cB5DA61EB18b06D035052441009d1E6 Fantom Cross Chain Manager Proxy contract hash CCM 0x2aA63cd0b28FB4C31fA8e4E95Ec11815Be07b9Ac Fantom Cross Chain Manager contract hash ECCD 0x6c2A37Cf23E21EF3cFC45FdE2C0E1d3a9e7365f9 Fantom Cross Chain Data contract hash Lock Proxy 0xd3b90E2603D265Bf46dBC788059AC12D52B6AC57 Fantom Lock Proxy contract hash Swapper 0xb68C0D092842a4a0272867D89245FCD7e7fcA3Eb Fantom Swapper contract hash Poly Wrapper 0x287Bd66753f0cA8e9C2171D782DF39e4C28cfd65 lock entrance for auto cross chain tx with fee Wrapper 2.0 0xf06587dE89e289Ce480CDf21109A14547eb33A0d wrapper_v2 that take native asset as fee Back to top Optimistic Type Contract Hash Desc CCMP 0xE3D0FB6E3cB5DA61EB18b06D035052441009d1E6 Optimistic Cross Chain Manager Proxy contract hash CCM 0x2aA63cd0b28FB4C31fA8e4E95Ec11815Be07b9Ac Optimistic Cross Chain Manager contract hash ECCD 0x6c2A37Cf23E21EF3cFC45FdE2C0E1d3a9e7365f9 Optimistic Cross Chain Data contract hash Lock Proxy 0xd3b90E2603D265Bf46dBC788059AC12D52B6AC57 Optimistic Lock Proxy contract hash Swapper 0xD24BEcEdFCE7f95693Fa3938eaC6dd66725B4Bbf Optimistic Swapper contract hash Poly Wrapper 0x287Bd66753f0cA8e9C2171D782DF39e4C28cfd65 lock entrance for auto cross chain tx with fee Wrapper 2.0 0xf06587dE89e289Ce480CDf21109A14547eb33A0d wrapper_v2 that take native asset as fee Back to top Metis Type Contract Hash Desc CCMP 0xE3D0FB6E3cB5DA61EB18b06D035052441009d1E6 Metis Cross Chain Manager Proxy contract hash CCM 0x2aA63cd0b28FB4C31fA8e4E95Ec11815Be07b9Ac Metis Cross Chain Manager contract hash ECCD 0x6c2A37Cf23E21EF3cFC45FdE2C0E1d3a9e7365f9 Metis Cross Chain Data contract hash Lock Proxy 0xeFB5a01Ed9f3E94B646233FB68537C5Cb45e301D Metis Lock Proxy contract hash Lock Proxy-PIP4 0xbE46E4c47958A79E7F789ea94C5D8071a0DeE31e Metis Lock Proxy contract hash Wrapper 3.0 0xFbFDfc95B8EAe4719Ae7D7b94e6F7aCC2DC2e0D7 wrapper_v2 that take native asset as fee Metis 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000 Metis LP Metis 0xF3eCc2FF57DF74aE638551b060864717EFE493d2 LP Metis Back to top Router And ChainId Type Router Number ChainId Bitcoin 1 1 Ethereum 2 2 Ontology 3 3 Neo Legacy 4 4 Switcheo 5 5 BSC 6 6 Heco 7 7 Palette 8 8 Zilliqa 17 18 Curve 10 10 OKExChain 12 12 Neo N3 14 14 Heimdall 15 15 Polygon 16 17 Arbitrum 0 19 xDAI 0 20 Avalanche 0 21 Fantom 0 22 Optimistic 0 23 Metis 0 24 Back to top Relayers relayers Back to top Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-20 17:15:23 "},"Core_Smart_Contract/README_TestNet.html":{"url":"Core_Smart_Contract/README_TestNet.html","title":"Contract","keywords":"","body":" MainNet | TestNet | DevNet | Zion_DevNet This's cross chain asset contract info on TESTNET, it's used to bind asset mapping in different chain, if the name ends with (s) on behalf of the asset is mapping. Contract Index(Chain-Chain Id) Bitcoin-1 Ethereum-2 Ontology-3 Neo N2-5 Switcheo- Bsc-79 Heco-7 Palette-107 Ok-200 Curve-82 Neo N3-88 Polygon-202 Zilliqa-111 Arbitrum-205 xDAI-206 Avalanche-209 Fantom-208 Optimistic-207 Metis-300 Goerli-502 Rinkeby-402 Kovan-302 Pixie-316 Boba-400 Quick Index Router And ChainId Decentralized Application TestNet Nodes Decentralized Application TestNet Nodes Chain IP Rpc Port Poly http://beta1.poly.network 20336 Neo http://seed9.ngd.network 20332 Back to top Ethereum Type Contract Hash Desc CCMP 0xb600c8a2e8852832B75DB9Da1A3A1c173eAb28d8 Cross Chain Manager Proxy contract hash ECCD 0xA38366d552672556CE82426Da5031E2Ae0598dcD Ethereum Cross Chain Data contract hash ECCM 0xf989E80AAd477cB6059f366C0170a498909C4a55 Ethereum Cross Chain Manager contract hash Lock Proxy 0xD8aE73e06552E270340b63A8bcAbf9277a1aac99 The lock proxy bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx Wrapper 0xDc37471Af6a8aB7f45F444c5a3Ef4758281bE32C Ethereum Wrapper contract hash PLT Asset 0x1AC77d322e3347B8de181304B7c118a7e89c6Bc1 The palette asset hash NFT Lock Proxy 0x9bEF1AE7304D3d2F344ea00e796ADa18cE1beb03 The NFT lock proxy contract hash NFT Wrapper 0x940300dc3Fc26e3A330a300be766184C0b5Fe019 The NFT Wrapper contract hash NFT Query 0x500674D603331C43ed2288834BAb284BF65fc076 The NFT profile query contract hash NFT SEASCAPE 0x3680fb34F55030326659cd9AaEc522B6E355bdB6 The seascape NFT contracct hash NFT cat1 0xa85c9FC8F2c9060d674E0CA97F703a0A30619305 The NFT collection of digitalCat1 contract hash ERC20 0x276788aF4a803781267c84692416311DE1F761f9 ERC20 template contract hash in Ethereum chain EOEP4 0x3105A14F7956D33a51F12eF3AE50A3f1eF161Dff OEP4x template contract hash in Ethereum chain EONG 0x42d9feF0Cbd9c3000CECe9764d99A4a6fE9E1B34 ONGx contract hash in Ethereum chain EONT 0x530aae4C0859894023906e28467f2a7F111B6ff3 ONTx contract hash in Ethereum chain EONTD 0x76130c293AA35bf7B3e5fED1E9aE1E5DF12C6A92 ONTD ONT with decimals ETH 0x0000000000000000000000000000000000000000 The asset hash that we treat as the Ether asset USDT 0xad3f96ae966ad60347f31845b7e4b333104c52fb USD Tether USDC 0x0d9c8723b343a8368bebe0b5e89273ff8d712e3c USDC WBTC 0x557563dc4ed3fd256eBA55B9622f53331ab97c2f WBTC DAI 0x8Cad2301F7348DFc10C65778197028F432d51e76 DAI EBTC 0x92705a16815A3d1AEC3cE9Cc273C5aa302961FcC Btcx contract hash corresponding with unique btc redeem script ECNEO 0x7E269f2f33A97C64192e9889FAeEC72A6fcdB397 RENBTC 0x239100e629a9Ca8e0BF45C7892b0fc72d78AA97A pWING 0xB60e03E6973B1d0b90a763f5B64C48ca7cB8c2d1 WING on ethereum pPAX 0x825c227B07153eA450a6607E35c2BF70a9B2fe47 sUSD 0x21718C0FbD10900565fa57C76e1862cd3F6a4d8E How to get sUSD pOKB 0x776C8DB09367615BC741Be6e13Dec8EAbD2bD8bd pUNI 0x1269d9940a2bfc5aC13c759E7ef1E35FEc7278f6 pBNB 0x09c6a1B0B32a8B2c327532518C68F9B0C54255b8 pHT 0x930B81bDdCd7A793D3541E41D85475a20E169092 pHRC20 0x3FDd17AbFbB43D29e32746C273085C05d58e2e80 pFLM 0xc4e419CC0945dC9860A73B3A2cAcAA12aD7CF3B8 xWETH 0xd38fc89febb12e5d32faa72e07d486a268b9c63a xWBTC 0x447b931cc604a30dc16c49002f35a7aab7888b78 xUSDT 0xf15b5430321f4e51f5f534cedada7fbb78fa6680 Cash 0x6678C7f809c699c9B1F7da6F263b5cF407b8EB1d Cash Share 0x61ADf6f0D936C8602893228bbB83d1AC08eB60FB Share CVT 0xe6DF8136171FA8C3D4eA450C4A86bA707AECFBba REVO 0x155040625D7ae3e9caDA9a73E3E44f76D3Ed1409 Essentia 0xdD5B6056744F7ECa6784cA09C2590004Ec67729D Back to top Bsc Type Contract Hash Desc CCMP 0x441C035446c947a97bD36b425B67907244576990 Cross Chain Manager Proxy contract hash ECCD 0xE815E5B52A659d78c91B747f7A3b358cc4F04794 Cross Chain Data contract hash ECCM 0x906bC93FF690d6D3D2C4E7A7dfA4dEbdEF2cD7CA Cross Chain Manager contract hash Lock Proxy 0x097Ae585BfEf78DDC8E266ABCb840dAF7265130c The lock proxy bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx Lock Proxy1.5 0xB4004B93f1ce1E63131413cA201D35D1F3f40e5D The lock proxy 1.5 bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx Wrapper 0x9f9F15CC407F7b26f55D71D43f993580a9107007 wrapper contract hash Wrapper3.0 0xfb717F8d478156fE7428369075bB2FaB4Ea659B5 wrapper contract hash used by lockproxy2.0 NFT Lock Proxy 0x9bEF1AE7304D3d2F344ea00e796ADa18cE1beb03 The NFT lockc proxy contract hash NFT Wrapper 0x61E289D43C1FEA7598786557A2F309979ad144D3 The NFT Wrapper contract hash NFT Query 0xAB3e1F13127bE931A71Fdc8940bd31506EFC6A70 The NFT profile query contract hash NFT SEASCAPE 0x66638F4970C2ae63773946906922c07a583b6069 The seascape NFT contracct hash NFT cat1 0x455B51D882571E244d03668f1a458ca74E70d196 The NFT collection of digitalCat1 contract hash NFT Nobel Boss 0x301294a9c7c218d439edd6d5ab16f9663fc10f3e The NFT Nobel Boss Mint contract Bnb 0x0000000000000000000000000000000000000000 The asset hash that we treat as the Bnb asset USDT 0x23F5075740c2C99C569FfD0768c383A92d1a4aD7 USD Tether USDC 0xeE8410B64aAed811d84c313b72E040Cb09840b80 USDC WBTC 0xA3cE15f11D4427b6bad5630036f368a98e923E95 WBTC DAI 0xe5750F0EE3DFD2e6a3Aca35ddC0E904188Fd571e DAI WING 0x0a7BF54D2684885d731Dc63917A3178A2a1a8d4A WING ONTd 0xAd21Ee6507E8Ee05E7A239163031d1853Bb8869f ONTd pHT 0xFdE5B4D9B2D89b8DC11Bd83E1E1867a53F88695c pHT pHRC20 0xdb82f10Ef81ed9E43f3F03Fd8d2D3b92C86F546b pHRC20 pEth 0x44c86e6b6B613f3471ad87dBfAeB92B320b71a23 pEth pNeo 0xCe5b38C8B83428C5B4209a1866AA483De271Bd6c pNeo pSUSD 0xFE9b30ed047bC43F1537140772f50969a29df5de pSUSD Cash 0x62D475e25f7492027eB1888599f96f195B0D6065 Cash Share 0x4a2f867152E5370fb026b768CaC4647750c5Ae02 Share CVT 0x539DAAFE03Ff2685C8D7922a61C1A66f22807bb7 REVO 0x155040625D7ae3e9caDA9a73E3E44f76D3Ed1409 Essentia 0xcdA43a8EF603aC31DA6E104b481146374C53149C Metis 0xdB2D16f61e3e1bD54Ba8068E04F5552e718d5b7c Token LPToken 0xd6828c954E27Ae3929f098BA2Fb8Bf163817C40b Metis LP Token Back to top OK Type Contract Hash Desc CCMP 0x38917884b397447227fb45cbA0342F1bFf7A3470 Cross Chain Manager Proxy contract hash ECCD 0xd1Acc7bc3BDA9a63eEF89357a6f4c705ee874f44 Cross Chain Data contract hash ECCM 0x296f7f9f0e65152965e9BE12b349c14c7cE8eE85 Cross Chain Manager contract hash Lock Proxy 0x74cE7D56cd1b5AEe9A3345A490b5Ed768134C7D4 The lock proxy bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx Back to top Heco Type Contract Hash Desc CCMP 0xc5757b5d22984E534004cC7Fb1D59eD14EC510a5 Cross Chain Manager Proxy contract hash ECCD 0x709D63f3d1a46B89cE4F6a61C8fb16aB29fD26F8 Cross Chain Data contract hash ECCM 0x40039148ce624B560e5F5c095DdA90fc13442Cf8 Cross Chain Manager contract hash Lock Proxy 0x4a76E52600C6285029c8f7c52183cf86282cA5b8 The lock proxy bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx Wrapper 0xCC8407Ee04AaC2AdC0E6A55E7E97176C701146cd Wrapper contract hash NFT Lock Proxy 0x25BB8E9C0Cc03B30d09769735208a47d389Ff36c The NFT lockc proxy contract hash NFT Wrapper 0xbaBaAF5CF7f63437755aAAFE7a4106463c5cD540 The NFT Wrapper contract hash NFT Query 0xE1488842b15E0f084b254588f46e4C570065d6A0 The NFT profile query contract hash NFT SEASCAPE 0xF9Dd424e64E9264632a564FBDcC87Ba8eA40B5Ba The seascape NFT contracct hash NFT cat1 0x0C3C33dA088ABeeE376418d3E384528c5AaDBA11 The NFT collection of digitalCat1 contract hash HT 0x0000000000000000000000000000000000000000 Native Huobi token on huobi eco chain HRC20 0xFAddf0cfb08F92779560db57BE6b2C7303aaD266 simple HRC20 token same as ERC20 in Ethereum pNEO 0x6ef070cB10fC9F66D04A4c387928B268f55b9198 related to nNEO asset on Neo chain pONTd 0x01FaA7b4157f3a3672892c0ec2773f5400Dd2DCF pFLM 0xb1203bDC2C60521DCbf73DCfc82eDBdA101EA0A2 pBNB 0x33B89F811E8986C5b9D32114a21Cc1fd5FEB6C78 pWING 0xb8033859be7553cf9c7657f664FC2243BA5f02Ef pWBTC 0xB0FcB90b85Eab741ba28a132044E93344136cA36 pDAI 0x6965731AfED27AdD95BE4b0D88AC895Ea3eaC7EF pUSDC 0x63B79D3C4d1F7CBEFb80E4b0Ab7E8d1545Ba10c3 pETH 0x0BC413bBde7855Ba8114596B6Dc53eD8A5c10774 pUSDT 0x7698Da475B3132F37E40DE8C222d7D74d3A4172d pSUSD 0x83e906D9fa217D4210DC339133812054eB8d5629 Back to top Ontology Please donot send from or to Ontology network during upgrade of Ontology testnet Type Contract Hash Desc Wrapper B:a5c101afa9e04e9dd2c912983795005a49e02efa L: fa2ee0495a0095379812c9d29d4ee0a9af01c1a5 Lock Proxy B: 33c439c502cb4b6ac5a1e8057a65fe1fa7c300e2 L: e200c3a71ffe657a05e8a1c56a4bcb02c539c433 The bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx OERC20 B: e930755b130dccb25dc3cfee2b2e30d9370c1a75 L: 751a0c37d9302e2beecfc35db2cc0d135b7530e9 ERC20 template contract hash in Ontology chain OEP4 B: 969850e009b5e2a061694f3479ec8e44bc68bcd3 L: d3bc68bc448eec79344f6961a0e2b509e0509896 OEP4 template contract hash in Ontology chain ONG B: 0200000000000000000000000000000000000000 L: 0000000000000000000000000000000000000002 ONG asset hash in Ontology chain ONT B: 0100000000000000000000000000000000000000 L: 0000000000000000000000000000000000000001 ONT asset hash in Ontology chain OUSDC B:07a12c0a6bdce4df04ef4b2045d1b0fd63a56e25 L:256ea563fdb0d145204bef04dfe4dc6b0a2ca107 ONTd B:869951e3397550e800d5faf579857cdb637a0051 L:51007a63db7c8579f5fad500e8507539e3519986 ONT with 9 decimal contract hash oUSDT B: c6f91c11d740d39943b99a6b1c6fd2b5f476e2a3 L: a3e276f4b5d26f1c6b9ab94399d340d7111cf9c6 Ontology wrapped USDT (Ethereum) Cross Chain asset contract hash OWBTC B: aede525f05065306423a5522bfcd31b5847ffa52 L: 52fa7f84b531cdbf22553a42065306055f52deae Ontology wrapped WBTC (Ethereum) Cross Chain asset contract hash ODAI B: 96cf88356123592835a2fa75068a242260be1791 L: 9117be6022248a0675faa235285923613588cf96 OETH B: 7009a2f7c8a2e45fa386a6078c7bfeaf518be487 L: 87e48b51affe7b8c07a686a35fe4a2c8f7a20970 ONEO B: 13eef3e184d878038317d806796b3af2d9f9b36d L: 6db3f9d9f23a6b7906d817830378d884e1f3ee13 ORENBTC B: ec547bc4486dea97cb659f1fe73407922f9e63c8 L: c8639e2f920734e71f9f65cb97ea6d48c47b54ec WING B: ff31ec74d01f7b7d45ed2add930f5d2239f7de33 L: 33def739225d0f93dd2aed457d7b1fd074ec31ff pPAX B: 5cb420480614fc635f7bfa7f3bd2cd5484004545 L: 4545008454cdd23b7ffa7b5f63fc14064820b45c pSUSD B: 37f4497b6f5f511e73843a0bda1042777666f7ec L:ecf76676774210da0b3a84731e515f6f7b49f437 pOKB B: 0191f134a3ef0e1eb4f557b6aa0b8bdfd0a5db21 L: 21dba5d0df8b0baab657f5b41e0eefa334f19101 pUNI B: b79d2064947f61070cb68ef26cbc12cbf3b98d9e L: 9e8db9f3cb12bc6cf28eb60c07617f9464209db7 Back to top Neo(N2) Type Contract Hash Desc Wrapper 0x0f4fad9ae3830585a9264e6ec0b1eff3e89c6558 58659ce8f3efb1c06e4e26a9850583e39aad4f0f Nep5Proxy 0xedd2862dceb90b945210372d229f453f2b705f4f 4f5f702b3f459f222d371052940bb9ce2d86d2ed The lock proxy bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx CCMC 0xe1695b1314a1331e3935481620417ed835669407 07946635d87e4120164835391e33a114135b69e1 Cross Chain Manager Contract pnWETH 0x23535b6fd46b8f867ed010bab4c2bd8ef0d0c64f 4fc6d0f08ebdc2b4ba10d07e868f6bd46f5b5323 nNEO 0x17da3881ab2d050fea414c80b3fa8324d756f60e 0ef656d72483fab3804c41ea0f052dab8138da17 cGAS 0x74f2dc36a68fdc4682034178eb2220729231db76 76db3192722022eb7841038246dc8fa636dcf274 pONTd 0x658cabf9c1f71ba0fa64098a7c17e52b94046ece ce6e04942be5177c8a0964faa01bf7c1f9ab8c65 pnUSDT 0xb8f78d43ea9fe006c85a26b9aff67bcf69dd4fe1 e14fdd69cf7bf6afb9265ac806e09fea438df7b8 pnWBTC 0x69c57a716567a0f6910a0b3c1d4508fa163eb927 27b93e16fa08451d3c0b0a91f6a06765717ac569 pnUNI_V2_ETH_WBTC 0x7b95ed96fd45c0d5bf8341c26965249039740629 2906743990246569c24183bfd5c045fd96ed957b FLM 0x083ea8071188c7fe5b5e4af96ded222670d76663 6366d7702622ed6df94a5e5bfec7881107a83e08 pBNB 0xd2c9be183e9639dec881b577251d3a0d3f3bf1bb bbf13b3f0d3a1d2577b581c8de39963e18bec9d2 pWING 0x9612f09852522be3cf6e1a4db8b5a496a9036e40 406e03a996a4b5b84d1a6ecfe32b525298f01296 pWBTC 0x039d8bdb37b7f42230bf5c6ea1ff8b348aa12c8b 8b2ca18a348bffa16e5cbf3022f4b737db8b9d03 pDAI 0xe26656daaa0c6a8ee6c4929acdb25ebf3b73011b 1b01733bbf5eb2cd9a92c4e68e6a0caada5666e2 pUSDC 0x63d3999d6d9b04d35c7c8aa9a450c9bb3b3db838 38b83d3bbbc950a4a98a7c5cd3049b6d9d99d363 pHT 0x843e9f7a4ba7e062a53d7bbbe85cb35421704616 1646702154b35ce8bb7b3da562e0a74b7a9f3e84 pHrc20 0xbb01ac51a4c49bd28676274726497ab27ae8f66c 6cf6e87ab27a492647277686d29bc4a451ac01bb pxWETH 0xebda3300da6b657641fe627e2a2ef3a893f9ceb8 b8cef993a8f32e2a7e62fe4176656bda0033daeb pxWBTC 0x3b772e350b8e1e48c95406c5d8051e2c3de0076a 6a07e03d2c1e05d8c50654c9481e8e0b352e773b pxUSDT 0xf6e02d506929c3f47be47bf60997a96a41c7b282 82b2c7416aa99709f67be47bf4c32969502de0f6 Back to top Neo(N3) Type Contract Hash Desc Wrapper Nep17Proxy 0x4487494dac2f7eb68bdae009cacd6de88243e542 42e54382e86dcdca09e0da8bb67e2fac4d498744 The lock proxy bridge contract hash for asset not implementing the \"lock\" and \"unlock\" logic to do cross chain tx CCMC 0x618d44dc3af16c6120dbf65402024f40a04f772a 2a774fa0404f020254f6db20616cf13adc448d61 Cross Chain Manager Contract NFT Lock Proxy 0x7acd03102216db84993710cafb924e48a2259e1a 1a9e25a2484e92fbca10379984db16221003cd7a NFT cat1 0xd74d35311c2a20ba78cd12056d3017da5bd352a6 a652d35bda17306d0512cd78ba202a1c31354dd7 NEO 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 f563ea40bc283d4d0e05c48ea305b3f2a07340ef GAS 0xd2a4cff31913016155e38e474a2c06d08be276cf cf76e28bd0062c4a478ee35561011319f3cfa4d2 bNEO 0x48c40d4666f93408be1bef038b6722404d9a4c2a 2a4c9a4d4022678b03ef1bbe0834f966460dc448 FLM 0x1415ab3b409a95555b77bc4ab6a7d9d7be0eddbd bddd0ebed7d9a7b64abc775b55959a403bab1514 fUSDT 0x83c442b5dc4ee0ed0e5249352fa7c75f65d6bfd6 d6bfd6655fc7a72f3549520eede04edcb542c483 fWBTC 0xad97a439b4a035184d1ab46a07ee75687f541237 3712547f6875ee076ab41a4d1835a0b439a497ad fWETH 0x38a2aace91f92b979207c0dd50a857c117d4785b 5b78d417c157a850ddc00792972bf991ceaaa238 pONT 0x74ba424c768dbbb64ce02f7786137cdd4a5dc27b 7bc25d4add7c1386772fe04cb6bb8d764c42ba74 Back to top Note B means big-endian, we can search the contract transaction history in corresponding explorer. L means little-endian, we usually use it as the asset hash input when we do binding asset hash operation. Back to top Cosmos Type Denom (coin name) Asset/Contract Hash Desc Lock Proxy f71b55ef55cedc91fd007f7a9ba386ec978f3aa8 ERC20 erc20x 657263323078 OEP4x oep4x 6f65703478 ONGx ongx 6f6e6778 ONTx ontx 6f6e7478 ETHx ethx 65746878 BTCx btcx 62746378 NEOx neox 6e656f78 not including currently GASx gasx 67617378 not including currently ATOM stake 7374616b65 not including currently Back to top Polygon Type Contract Hash Desc CCMP 0x15D3f62822a446b8C5fDBBef157f0b82b05c29Ab Cross Chain Manager Proxy contract hash ECCD 0xd097cf11c0215563AaAE2d3bb49366C59FFFa144 Cross Chain Data contract hash ECCM 0xe6d97637EFb55d8c81154E29aC343Bc447F80c19 Cross Chain Manager contract hash Lock Proxy 0x4e5eF0CA5A94b169Fb010fb40DBFD57c4830f446 The lock proxy bridge contract hash Poly Wrapper 0xD5d63Dce45E0275Ca76a8b2e9BD8C11679A57D0D lock entrance for auto cross chain tx with fee Swapper 0x1B0C55be400e2a7D924032B257Fbc75Bbfd256E7 Curve entrance for auto cross chain tx with fee NFT Lock Proxy 0x761fb099d021cf55ffe65f9bedd3e2bab52abccc The NFT lockc proxy contract hash NFT Wrapper 0xea5b2a0cf4ca9bd5c72ea1fbee1ffe420e57f692 The NFT Wrapper contract hash NFT Query 0x13227576c94119755bbad5bf01d8ac332f80e8ad The NFT profile query contract hash NFT Nobel Boss 0xd0609f06ffa034a525d31fdc1a4ba94a457f4620 The NFT Nobel Boss Mint contract Back to top Palette Type Contract Hash Desc CCMP 0x309064768EBD4EeF8ce073888e2f1C7e1CCCa191 Cross Chain Manager Proxy contract hash ECCD 0x17d37a71986b7592dF8BAD1a9F0FB8Da9792d8D3 Cross Chain Data contract hash ECCM 0xB64EE4b7cf935C51233b6ED9b0732D3Bd26E3442 Cross Chain Manager contract hash PLT Wrapper 0x2D44Db62D82EE13ff7DD02C03CA37b240213175C lock entrance for plt(erc20) auto cross chain tx without fee NFT Wrapper 0xFeEbBc92365a203a2FDCc4B1bBDAA2489A9bb6Ac lock entrance for nft(erc721) auto cross chain tx without fee NFT Lock Proxy 0x6e5fB68D6B705A567d75135169cF69574225eBe6 The NFT lock proxy bridge contract hash NFT Query 0x34B5B0cC2b57d96d3930Ddc66084029170fE6BFD The NFT query contract hash which used to batch fetch token urls and token ids Back to top Zilliqa Type Contract Hash Desc CCMP 0x6b95e35a3355df6d841127349f243ef4f017eaf2 Cross Chain Manager Proxy contract hash CCM 0x720a3fb587b670de99d94925b6f99c9a63d462c1 Cross Chain contract hash Lock Proxy 0xa5a43eecd29534edf80792a9889f52c77455245d Lock proxy contract hash zETH 0x0e0cbcd97db4c94890b528ef3d33d5b5c1776eef Zilliqa-bridged ETH token zDai 0x8f79cd968f0968565a157975f4fe406ea22d0571 Zilliqa-bridged Dai Stablecoin Back to top Arbitrum Type Contract Hash Desc CCMP 0xeE96Aa05b320a570C489aBd5EEc546AE4Fb58Eb7 Cross Chain Manager Proxy contract hash ECCD 0x71c2003f90bA0D2ce8a79DE9a70E7dD41BBfB983 Cross Chain Data contract hash ECCM 0x3A77dB10eAa7436e608a99643Ab2bEB2E901C72C Cross Chain Manager contract hash Lock Proxy 0x97f72bA888A26A0F98C67cf15d781dDBFE64B990 The lock proxy bridge contract hash Wrapper 0x27eb74B4Db37517F1dC6dE67364e19782624402F Back to top Xdai Type Contract Hash Desc CCMP 0x3E5ceC313CECaa37319e0F2C949656441103C429 Cross Chain Manager Proxy contract hash ECCD 0xAefD220aE393144dcb5EFD6Ab55ABDf6a3d0444d Cross Chain Data contract hash ECCM 0xF87527a74215777391fE4AfD082FeeED3E5A0ca5 Cross Chain Manager contract hash Lock Proxy 0x52B3048eeF2E53bAF430B0bA4752999F244d1709 The lock proxy bridge contract hash Wrapper 0xa7eDA65F94A2a334a0de42d479585b65D27b2249 NB 0xFe1c7C8193FA9491c8790dF7f24174D88146873D Token Back to top Optimistic Type Contract Hash Desc CCMP 0x0ca3f95c8f66C7B178414CCFd7a508d349b9f794 Cross Chain Manager Proxy contract hash ECCD 0xbA6F835ECAE18f5Fc5eBc074e5A0B94422a13126 Cross Chain Data contract hash ECCM 0xC8042579D6b60E0e35161F228827E3Fa0F51d5B6 Cross Chain Manager contract hash Lock Proxy 0x8a85143cA6ec1e181C3A5Ae4042ca999bFbF571B The lock proxy bridge contract hash Wrapper 0xE324EF8cd52833DD117e8ca87b483E78b30C3696 NB 0x3fec290112c79e94f4813fd3f7cbac3391426f50 Token Back to top Fantom Type Contract Hash Desc CCMP 0x74D67A4EFbA6Dbbb14DC574b6Db4F11f6b1C5af8 Cross Chain Manager Proxy contract hash ECCD 0x4Bf7b284De2999628CBBEf6fE9F74f8B8E5eBF16 Cross Chain Data contract hash ECCM 0x1C84D74084c3C3301BE4777A568D78211189c871 Cross Chain Manager contract hash Lock Proxy 0x4a76E52600C6285029c8f7c52183cf86282cA5b8 The lock proxy bridge contract hash Wrapper 0xFAddf0cfb08F92779560db57BE6b2C7303aaD266 NB 0x82E9948acA92412b8094fE649C3f32bEfFFEDb7C Token Back to top Avalanche Type Contract Hash Desc CCMP 0xcdd05Ebaa1FA06a5cE9eB67663aE9Ec78B37bd5B Cross Chain Manager Proxy contract hash ECCD 0x4d8BC48087b994AA419d4679069584a7C92586A8 Cross Chain Data contract hash ECCM 0xf37D8C2d072b74d6532541B70319ef08f9F6a4a8 Cross Chain Manager contract hash Lock Proxy 0x80a53FD352597AbA3dD52c722119865a8ed82632 The lock proxy bridge contract hash Wrapper 0xac0a6759696569B3729177ba6844D41FF6D57844 NB 0x82E9948acA92412b8094fE649C3f32bEfFFEDb7C Token Back to top Metis Type Contract Hash Desc CCMP 0xD5a240f7F755bCa2aE992E807b06d24eB6DF7C12 Cross Chain Manager Proxy contract hash ECCD 0x30e6ec356ceF1cfe3c7e14392EA08448382327bD Cross Chain Data contract hash ECCM 0xd6fc5374649cea121395a4860FdB33F21783c4Af Cross Chain Manager contract hash Lock Proxy 0x0AF53d318De279C8e67FcC6914acF387CFaA8B7E The lock proxy bridge contract hash LockProxyPIP4 0xe6E89cde11B89D940D25c35eaec7aCB489D29820 The lock proxy 1.5 bridge contract hash Wrapper 0xc2d365475EEf3ec83e59D1BcDF3A291D7B23Ba99 Wrapper3.0 0xA09E4d0406123d14CFB1d60D78C6Dc386b7de7F9 The Wrapper used in lockProxy 1.5 Wrapper2.0 0xb0354F5383839e163438Aa53dd58E5e70a548F2F NB 0x82E9948acA92412b8094fE649C3f32bEfFFEDb7C Token Metis 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000 Token LPToken 0x7A6EE6Aa417a420e2db416895501469fe3095971 Metis LP Token Back to top Goerli Type Contract Hash Desc CCMP 0xC8042579D6b60E0e35161F228827E3Fa0F51d5B6 Cross Chain Manager Proxy contract hash ECCD 0x10BCC4B6C2555fF48540571ebe5aBa6D32915250 Cross Chain Data contract hash ECCM 0xbA6F835ECAE18f5Fc5eBc074e5A0B94422a13126 Cross Chain Manager contract hash Lock Proxy 0x509fB7A017e33f18101dDC0d28Ac06aEaf6Edb4B The lock proxy bridge contract hash Wrapper2.0 0xA058FC5427d3E634698d1185C1BA01ADAf998E14 NB 0x3AA03cD463D1e05e05F717a721bE1bC98dA54917 Token Back to top Rinkeby Type Contract Hash Desc CCMP 0x0ca3f95c8f66C7B178414CCFd7a508d349b9f794 Cross Chain Manager Proxy contract hash ECCD 0xbA6F835ECAE18f5Fc5eBc074e5A0B94422a13126 Cross Chain Data contract hash ECCM 0xC8042579D6b60E0e35161F228827E3Fa0F51d5B6 Cross Chain Manager contract hash LockProxy 0x8a85143cA6ec1e181C3A5Ae4042ca999bFbF571B The lock proxy bridge contract hash LockProxyPIP4 0x30e6ec356ceF1cfe3c7e14392EA08448382327bD The lock proxy PIP4 bridge contract hash WrappeV2 0xE324EF8cd52833DD117e8ca87b483E78b30C3696 WrapperV3 0xD5a240f7F755bCa2aE992E807b06d24eB6DF7C12 NB 0x3AA03cD463D1e05e05F717a721bE1bC98dA54917 Token Boba 0x6A6676813d3D4317442CF84667425C13553F4a76 Boba Token LP Boba 0x0a80C08081dAa3B9786B9661F83123C2772c5Df1 LP Boba Token Back to top Kovan Type Contract Hash Desc CCMP 0x8a85143cA6ec1e181C3A5Ae4042ca999bFbF571B Cross Chain Manager Proxy contract hash ECCD 0x7D87b4C81B9efE1783E0524a6f475F9C526641C2 Cross Chain Data contract hash ECCM 0x509fB7A017e33f18101dDC0d28Ac06aEaf6Edb4B Cross Chain Manager contract hash Lock Proxy 0x95a10b809c9Cfd51A46652C785ac73d7269834b9 The lock proxy bridge contract hash Wrapper2.0 0xa2d97d1A123c6bD39AFD97F696B937fAcb024313 NB 0x2dA279bD19AB7E8641c0EE1884Da56fb636Ca20f Token Back to top Pixie Type Contract Hash Desc CCMP 0x8F967507Ae66ad78c12478E10cA07c9104eb24A7 Cross Chain Manager Proxy contract hash ECCD 0xF9Dd424e64E9264632a564FBDcC87Ba8eA40B5Ba Cross Chain Data contract hash ECCM 0x2E830E0cf3dc8643B497F88C07c8A72EFE24B11f Cross Chain Manager contract hash Lock Proxy 0x46Fc99509c4Aab0c958B8b2175edAa9C4963Ac09 The lock proxy bridge contract hash Wrapper2.0 0xE7Db150e4095Cbb35914b5dC980906C77B5990d2 Nft Proxy 0xD54a267B2c983d883D39248Dd7002dc7405559E0 Nft Query 0xbaBaAF5CF7f63437755aAAFE7a4106463c5cD540 Nft Wrapper 0x06e3d8Eeb9DC4732e474c26674e08213c6e11921 Back to top Boba Type Contract Hash Desc CCMP 0x720aF2de5eA84b78AAC7BDFA812B47e41516D59c Cross Chain Manager Proxy contract hash ECCD 0x55a59c57a133d1c999b3Eaf5B16ad5c1F2e365c8 Cross Chain Data contract hash ECCM 0xa65bD4431C38A4dD9c92ebE60dE3cb8C252c04E5 Cross Chain Manager contract hash LockProxyPIP4 0x46Fc99509c4Aab0c958B8b2175edAa9C4963Ac09 The lock proxy bridge contract hash WrapperV3 0xF87527a74215777391fE4AfD082FeeED3E5A0ca5 Boba 0xF5B97a4860c1D81A1e915C40EcCB5E4a5E6b830 Boba Token LP Boba 0x3D3828C8A071169f825EF0A10aFC53867B7DeE39 LP Boba Token Back to top Router And ChainId Type Router Number ChainId Bitcoin 1 1 Ethereum 2 2 Ontology 3 3 NEO(N2) 4 5 Switcheo 5 release soon BSC 6 79 Heco 7 7 Palette 8 107 Zilliqa 111 111 OK 12 200 Curve 10 82 Heimdall 15 201 Polygon 16 202 NEO(N3) 88 88 Arbitrum 0 205 Xdai 0 206 Optimistic 0 207 Fantom 0 208 Avalanche 0 209 Metis 0 300 Goerli 0 502 Rinkeby 0 402 Kovan 0 302 Pixie 0 316 Boba 0 400 Back to top Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-20 17:51:02 "},"Core_Smart_Contract/README_DevNet.html":{"url":"Core_Smart_Contract/README_DevNet.html","title":"Contract","keywords":"","body":" MainNet | TestNet | DevNet | Zion_DevNet This's cross chain asset contract info ONLY in DevNet mode, it's used to bind asset mapping in different chain, if the name ends with (s) on behalf of the asset is mapping. Contract Index(Chain-Chain Id) Bitcoin-1 Ethereum-2 Ontology-3 Neo Legacy-217 Switcheo-182 Neo N3-220 Pixie-321 Cosmos-gaia-8 Btc BTCx Redeem Script: 522103c4564b837674de2482961a8d5f2a24a7e11e8a97aac5e92ac2e64500219144512102ccc07d3df7da58bb6fa5cfe5d7be415ff9463171b2600c93c080fcd0d49576a721036ec6299c1b14e57b45f1ad85eecbc48ad5447a05158a1bfb2ffb689ad69490d353ae BTCx Redeem Key: c737784e5fdae8860fb461d4d30ffd0b34701d5aBack to top Ethereum Type Contract Hash Desc CCMP 0x7087E66D6874899A331b926C261fa5059328d95F Lock Proxy 0x46DE64740cf839374afB264970f8D437732649cA ERC20 0x94566DB0987EcC816817F43d24E9d6bf29316392 OEP4x 0x836c1Ad794F66A1a323567ae635D0Ce66Ed045D5 ONGx 0xfC89307C880B203894cc7e1193fBf0bebd62c233 ONTx 0xc0Be30D534e00bd485e10688023c9Cd9D523eEF0 ETH 0x0000000000000000000000000000000000000000 BTCx TODO NEOx not including in the testing framework Back to top Ontology Type Contract Hash Desc Lock Proxy B: ebad45b887c6bf7cc4c1df8f72da156bc91b04b7 L: b7041bc96b15da728fdfc1c47cbfc687b845adeb ERC20x B: 2bd086d90c282a26d021d01039b84a968ed57444 L: 4474d58e964ab83910d021d0262a280cd986d02b OEP4 B: d6967fa9b11b0836ec9dc8572f4bab6f65d710f9 L: f910d7656fab4b2f57c89dec36081bb1a97f96d6 ONG B: 0200000000000000000000000000000000000000 L: 0000000000000000000000000000000000000002 ONT B: 0100000000000000000000000000000000000000 L: 0000000000000000000000000000000000000001 ETHx B: d6b4cd930377e7e81d1ace85bbb9ce59f4dd9410 L: 1094ddf459ceb9bb85ce1a1de8e7770393cdb4d6 BTCx B: d177d904456479dd592d4ce368e5d97ec8ffbcee L: eebcffc87ed9e568e34c2d59dd79644504d977d1 NEOx B: L: not including in the testing framework Back to top Neo Legacy Type Contract Hash Desc pnUSDT B: 0x20bc5bbb4dde06e5ca02bef761a9fdca6a05fd77 L: 77fd056acafda961f7be02cae506de4dbb5bbc20 CCMC B: 0x3135a1a4668688a3e15b004af3a718f2d67141ca L: ca4171d6f218a7f34a005be1a3888666a4a13531 Lock Proxy B: 0x3fef7ac6598ad83f5e4d4338e65530eba2173294 L: 943217a2eb3055e638434d5e3fd88a59c67aef3f Receiver: A: AZXRTygHgRbPu9o16K6en4BaZD11tXCmN1 B: 0x4fd83a49df40c0a7de2671da20c2a8dfe495b6c2 L: c2b695e4dfa8c220da7126dea7c040df493ad84f Back to top Note B means big-endian, we can search the contract transaction history in corresponding explorer. L means little-endian, we usually use it as the asset hash input when we do binding asset hash operation. Back to top Neo N3 Type Contract Hash Desc pnUSDT B: 0xc9505566e11660d239d987b5522a2232665bd0a8 L: a8d05b6632222a52b587d939d26016e1665550c9 CCMC B: 0x7c842f3900ceba5bcdeeeec05c9b41ba63ad6cd2 L: d26cad63ba419b5cc0eeeecd5bbace00392f847c Lock Proxy B: 0x5376f41082a84fb000c944b6d44ba85b14e20fe5 L: e50fe2145ba84bd4b644c900b04fa88210f47653 Receiver: A: NLKpYEDmyGMWQVeqcoyZr9Lyo8P5Mrozba B: 0x67ce818168a75d3bedb7d295bf11c060d1c38204 L: 0482c3d160c011bf95d2b7ed3b5da7688181ce67 Back to top Note B means big-endian, we can search the contract transaction history in corresponding explorer. L means little-endian, we usually use it as the asset hash input when we do binding asset hash operation. Back to top Cosmos-Gaia Type Denom (coin name) Asset/Contract Hash Desc Lock Proxy f71b55ef55cedc91fd007f7a9ba386ec978f3aa8 ERC20 erc20x 657263323078 OEP4x oep4x 6f65703478 ONGx ongx 6f6e6778 ONTx ontx 6f6e7478 ETHx ethx 65746878 BTCx btcx 62746378 NEOx neox 6e656f78 not including in the testing framework GASx gasx 67617378 not including in the testing framework Cosmos stake 7374616b65 not including in the testing framework Back to top Pixie Type Contract Hash Desc ECCD 0x25BB8E9C0Cc03B30d09769735208a47d389Ff36c Ethereum Cross Chain Data contract hash ECCM 0x6fd13dd4181dDb0f7463e19caC659FD3e9FB8a82 Ethereum Cross Chain Manager contract hash CCMP 0x9bEF1AE7304D3d2F344ea00e796ADa18cE1beb03 Cross Chain Manager Proxy contract hash Lock Proxy 0xa85c9FC8F2c9060d674E0CA97F703a0A30619305 The lock proxy bridge contract hash Wrapper2.0 0x455B51D882571E244d03668f1a458ca74E70d196 NFT Lock Proxy 0x6Bc728a0ce7e189CBfb8AD932fb57928106D2674 NFT lock proxy contract hash NFT Wrapper 0x3237b7BC8283B4E07bAC017EAe52eBC34B278cE9 NFT Wrapper contract hash NFT Query 0x35EFCE8D79D6Cae30B38F6dAC3fc55C62c146b4c NFT Query contract hash P11008713 0x2B5bAB0C9D94C380cf87F5B3033258b673FEFa65 NFT Source asset contract hash P11008713 0x94aa42C5dAB9b1006f59FF5E311344CC460A2335 NFT Dest asset contract hash, this asset only used for testing, pixie chain is both of source chain and dest chain pixie test net rpc: https://http-testnet.chain.pixie.xyz pixie test net explorer: https://scan-testnet.chain.pixie.xyz/ Back to top Router And ChainId Type Router Number ChainId Bitcoin 1 1 Ethereum 2 2 Ontology 3 3 NEO Legacy 217 217 NEO N3 220 220 Cosmos-gaia 5 8 Switcheo 5 182 Pixie 19 321 Back to top Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-20 17:15:23 "},"Core_Smart_Contract/Zion_dev_contracts.html":{"url":"Core_Smart_Contract/Zion_dev_contracts.html","title":"Contract","keywords":"","body":" MainNet | TestNet | DevNet | Zion_DevNet Contract Index(Chain-Chain Id) Main Chain-1 Ethereum-2 Side Chain-77 Avalanche-500 Arbitrum-300 Bsc-79 Heco-7 Ok-1012 PLT-107 MATIC-20016 Kovan-302 Rinkeby-402 Goerli-502 Optimistic-200 Fantom-400 Back to top Main Chain Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCM 0x5747C05FF236F8d18BB21Bc02ecc389deF853cae Eth Cross Chain Manager contract hash Native Lock proxy 0x7d79D936DA7833c7fe056eB450064f34A327DcA8 The native lock proxy bridge contract hash Native wrapper 0x5D315b2f0C63890eFbfB37c26E0ae0807e72bCc9 Essentia 0xdD5B6056744F7ECa6784cA09C2590004Ec67729D Back to top Eth (Ropsten) Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCD 0x61BB5E606d8723a021EF17D5929EE8cca20A5beE Eth Cross Chain Data contract hash CallerFactory 0xA7E69152dBA4EA63d4786068d26DF0100d580A15 ECCMI 0x51056dd04f3Ad664912534d26f026B46A9817f1C Eth Cross Chain Manager Implementation contract hash ECCM 0x00f0Ea33a087c76cd86EA1e70481d0B25CA4f407 Eth Cross Chain Manager contract hash LockProxy 0x32a76C671334F0a9a05C07Ce82223A882b2603Ac WrapperV1 0x5cb4005d7c40763b635D8f0231a05667B47B5b07 WrapperV2 0x04781017E67907f4d634fBe755E3CFA4ef4625f8 Back to top Side Chain Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCD 0x34d4a23A1FC0C694f0D74DDAf9D8d564cfE2D430 Eth Cross Chain Data contract hash ECCM 0xc6195336878Fc34B1b5A13895015a97c1aD9cc25 Eth Cross Chain Manager contract hash Native LockProxy 0x7d79D936DA7833c7fe056eB450064f34A327DcA8 The native lock proxy bridge contract hash Native wrapper 0x3b2749D4Ca77837730e8ff8318DC9cc688595E95 LockProxy 0xF6C69CdF9F03Ec22d12FED30f218b36A0Cd31Bb2 The lock proxy bridge contract hash WrapperV1 0x9f9F15CC407F7b26f55D71D43f993580a9107007 WrapperV2 0x412fA3Ab81d5D57089346ccFeb5c52f6d1ed42E1 Back to top Bsc Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCD 0x8A19b36252139327508e3C394437760124a85247 Eth Cross Chain Data contract hash CallerFactory 0x7BA2dbd475F15ED63029c5CFE8456C2D0C5e6b5C ECCMI 0xC3c6874A47b219869f46b8FA0Ff6a3E4CfAb9022 Eth Cross Chain Manager Implementation contract hash ECCM 0xA5a21704C1e66a0583F7C40ad7D68B0C43B43CcC Eth Cross Chain Manager contract hash LockProxy 0xf422f2E201114F10f413d6848555f7A887eC8866 The lock proxy bridge contract hash WrapperV1 0xdEc4ed7939AC57b05c0b10685791491148E210c0 WrapperV2 0x7D86e3cB8f8cb9dA8cF80DE37671BC637bb2E79e Back to top Heco Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCD 0x0914CEe414cEA9435Ec94a9713690D324FD10393 Eth Cross Chain Data contract hash CallerFactory 0xE4a3e7857431bD394FBF40E2979b371226e0958E ECCMI 0x2a904aB47B813AC2DF2383f9e734b2bd0c55f476 Eth Cross Chain Manager Implementation contract hash ECCM 0x61fe143DaB6D597711e7aef6F57B2b0158c75Ed4 Eth Cross Chain Manager contract hash LockProxy 0x79382ceB68c38c58D2d8Cbf21486c26A942DA516 The lock proxy bridge contract hash WrapperV1 0x842bF0CB3242E9f28552aaa7854Bcc8348c20C44 WrapperV2 0x398745B0140F312Fb3a3B1bCe28Eb4757cd2ED6d Back to top Ok Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCD 0x73f692E9d98D715baa7227Af2A3d83995543c218 Eth Cross Chain Data contract hash CallerFactory 0x07060549E7a0CF0f99519B81f854Ce194DED0da9 ECCMI 0x9c5e484438fbFf492f23f52a7f666F60122360F8 Eth Cross Chain Manager Implementation contract hash ECCM 0x232064976d8872d6B78c7AF00E1EAdDa13f63Aa2 Eth Cross Chain Manager contract hash LockProxy 0x3753101ab6CD569cd5015e26fE8DA0d7667E9AD0 The lock proxy bridge contract hash Back to top PLT Type Contract Hash Desc Owner 0x6A708455C8777630AaC9d1e7702d13F7a865b27C ECCD 0xC5d3196eCE7A26fBbbFa0556D606C9F804a8Be9a Eth Cross Chain Data contract hash CallerFactory 0x2E2CD8e6c1210DB02B302aD202eDf4dD4bb98307 ECCMI 0xaa5D32A1e201f69C1FbD1fCB24d417a19969D105 Eth Cross Chain Manager Implementation contract hash ECCM 0x9030DC3CA3ECf7350F026c8EbEEC9f79D65A1694 Eth Cross Chain Manager contract hash LockProxy 0x7A54cd2Ea2366853881CC99132bdd882918d1186 The lock proxy bridge contract hash WrapperV1 0x2e328922b42613cEB967ad49bB73140a82F70BD4 WrapperV2 0x31349Bdd67CBe4A07556200D5373a4d86312dca0 Back to top MATIC Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCD 0x7AcD19d52Fb624aC7d355Eb843587671eeeB2661 Eth Cross Chain Data contract hash CallerFactory 0x302ac4Fc05Bb6299DFb8542864A8873dD443ad47 ECCMI 0xA7af9F006f920538F693fC2Fa2AD7E16E37c025c Eth Cross Chain Manager Implementation contract hash ECCM 0x64C0De4eAAEA25ED36DE2a22328df8c59238D149 Eth Cross Chain Manager contract hash LockProxy 0x777b10A4eA62ccA43e85aFF169b8Bb077e115a2d The lock proxy bridge contract hash wrapperV2 0xbeaB45aAa84581590e0BC82Ec0e7c9f487b870a7 Back to top Kovan Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 ECCD 0xbAa40bBd7888f79614057d82bdcE88dF2D23bf55 Eth Cross Chain Data contract hash CallerFactory 0xaAB03Ce9bc89CBBC515738aA40D482F425037877 ECCMI 0xf05D44F1C37F3a6B07D36e3C6ddFF8e39f4Ba115 Eth Cross Chain Manager Implementation contract hash ECCM 0x262939a78AeA3662Bd0d99f189D12Ed5655a033d Eth Cross Chain Manager contract hash LockProxy 0x33aD16aA59b20A8d8E7cB8F48179eB3e09D24b69 The lock proxy bridge contract hash wrapperV2 0x87bF79eF2Dd87535f762e47028345dF7527c3206 Back to top Rinkeby Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 LockProxy 0xF6C69CdF9F03Ec22d12FED30f218b36A0Cd31Bb2 The lock proxy bridge contract hash ECCD 0x34d4a23A1FC0C694f0D74DDAf9D8d564cfE2D430 Eth Cross Chain Data contract hash CallerFactory 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 ECCMI 0xBFC0457548BB90D54123a71a7310BaDa8f4662c0 Eth Cross Chain Manager Implementation contract hash ECCM 0x1B0C55be400e2a7D924032B257Fbc75Bbfd256E7 Eth Cross Chain Manager wrapperV2 0x82E9948acA92412b8094fE649C3f32bEfFFEDb7C Back to top Goerli Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 LockProxy 0xF6C69CdF9F03Ec22d12FED30f218b36A0Cd31Bb2 The lock proxy bridge contract hash ECCD 0x34d4a23A1FC0C694f0D74DDAf9D8d564cfE2D430 Eth Cross Chain Data contract hash CallerFactory 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 ECCMI 0xBFC0457548BB90D54123a71a7310BaDa8f4662c0 Eth Cross Chain Manager Implementation contract hash ECCM 0x1B0C55be400e2a7D924032B257Fbc75Bbfd256E7 Eth Cross Chain Manager contract hash wrapperV2 0x82E9948acA92412b8094fE649C3f32bEfFFEDb7C Back to top Optimistic Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 LockProxy 0xF6C69CdF9F03Ec22d12FED30f218b36A0Cd31Bb2 The lock proxy bridge contract hash ECCD 0x34d4a23A1FC0C694f0D74DDAf9D8d564cfE2D430 Eth Cross Chain Data contract hash CallerFactory 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 ECCMI 0xBFC0457548BB90D54123a71a7310BaDa8f4662c0 Eth Cross Chain Manager Implementation contract hash ECCM 0x1B0C55be400e2a7D924032B257Fbc75Bbfd256E7 Eth Cross Chain Manager contract hash WrapperV2 0x6d3F838613309185fE95297aBbA70db7bf605335 Back to top Fantom Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 LockProxy 0xF6C69CdF9F03Ec22d12FED30f218b36A0Cd31Bb2 The lock proxy bridge contract hash ECCD 0x34d4a23A1FC0C694f0D74DDAf9D8d564cfE2D430 Eth Cross Chain Data contract hash CallerFactory 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 ECCMI 0xBFC0457548BB90D54123a71a7310BaDa8f4662c0 Eth Cross Chain Manager Implementation contract hash ECCM 0x1B0C55be400e2a7D924032B257Fbc75Bbfd256E7 Eth Cross Chain Manager contract hash WrapperV1 0x9f9F15CC407F7b26f55D71D43f993580a9107007 WrapperV2 0x412fA3Ab81d5D57089346ccFeb5c52f6d1ed42E1 Back to top Avalanche Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 LockProxy 0xF6C69CdF9F03Ec22d12FED30f218b36A0Cd31Bb2 The lock proxy bridge contract hash ECCD 0x34d4a23A1FC0C694f0D74DDAf9D8d564cfE2D430 Eth Cross Chain Data contract hash CallerFactory 0x061a87Aac7695b9cf9482043175fd3bE3374AB66 ECCMI 0xBFC0457548BB90D54123a71a7310BaDa8f4662c0 Eth Cross Chain Manager Implementation contract hash ECCM 0x1B0C55be400e2a7D924032B257Fbc75Bbfd256E7 Eth Cross Chain Manager contract hash WrapperV1 0x9f9F15CC407F7b26f55D71D43f993580a9107007 WrapperV2 0x412fA3Ab81d5D57089346ccFeb5c52f6d1ed42E1 Back to top Arbitrum Type Contract Hash Desc Owner 0x7FB1484882e4A3A7a4e31f0eb33bf3dD3d95f797 LockProxy 0xC384662Dd7d0DFc5b7a6AE1f5EFB983B6B8a1540 The lock proxy bridge contract hash ECCD 0xBD3b9201d1f504dEE3e3F56ADfDF5f58bE7001e6 Eth Cross Chain Data contract hash CallerFactory 0xEE10F54834F77967a2D51BE2fC8BD74327108eC2 ECCMI 0xd8852a2a9B7875326e67962C195f904e74307dAe Eth Cross Chain Manager Implementation contract hash ECCM 0xCC8407Ee04AaC2AdC0E6A55E7E97176C701146cd Eth Cross Chain Manager contract hash WrapperV1 0xC248464118C2550625b2aeBC013ffD31DBF91cB4 WrapperV2 0x59f756BB542EF85d00b9de978d14B624672Bc3bb Back to top Chain-ID | Type | ID | | -------------- | -----------------------------| | Main Chain | 1 | |Ethereum |2 | |Side Chain |77 | |Avalanche |500 | |Arbitrum |300 | |Bsc |79 | |Heco |7 | |OK |1012 | |PLT |107 | |MATIC |20016 | |Kovan |302 | |rinkeby |402 | |goerli |502 | |Optimistic |200 | |Fantom |400 | Back to top Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-20 17:15:23 "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"Glossary","keywords":"","body":"Relayer A cross-chain information porter performs some of the most critical operations within the cross-chain. It acts as the medium of interaction between the side chain and the outside world. Each chain in the cross-chain ecosystem has a relayer associated with it. Relayer monitors its corresponding chain network for cross-chain transactions and forwards the respective block headers to the relay chain if detected, gaining available incentives in the process. At the same time, it also monitors for cross-chain transactions taking place on the relay chain and transfers them to the respective side chain. Side Chain A chain that is interested in joining the poly cross-chain ecosystem Source Chain A public chain corresponds to the target chain where a particular asset firstly appears. Target Chain A public chain corresponds to the source chain on which we want to cross an asset and issue a new token. For the ether asset, Ethereum is the source chain. When we want to issue a new OEP4 token in The Ontology network represents the ether, and the Ontology chain will be the target chain for the ether asset. Vice versa, For the ONT token, the Ontology chain is the source chain. When we want to issue a new ERC20 token in the Ethereum chain, Ethereum would be the target chain for the Ont network. Poly Chain The Relay chain in the cross-chain ecosystem. One of the crucial components of the cross-chain ecosystem. Each type of node is deployed and maintained by other individuals or organizations and has its unique governance and trust mechanism. The relay chain is responsible for connecting them, standardizing cross-chain data flow and interfaces, verifying the legitimacy of cross-chain data, etc. Canonical Block A block is included in the primary blockchain and is directly or indirectly referenced by future blocks. Blocks that are not canonical may have been valid but were discarded in favor of the canonical block. Cross Chain Council A Council formed by poly consensus nodes. Copyright © 2022 PolyNetwork. All right reserved.Last modification date： 2022-01-06 10:07:58 "}}